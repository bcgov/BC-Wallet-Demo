/* tslint:disable */
/* eslint-disable */
/**
 * Credential Showcase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CredentialAttribute } from './CredentialAttribute';
import {
    CredentialAttributeFromJSON,
    CredentialAttributeFromJSONTyped,
    CredentialAttributeToJSON,
    CredentialAttributeToJSONTyped,
} from './CredentialAttribute';
import type { IdentifierType } from './IdentifierType';
import {
    IdentifierTypeFromJSON,
    IdentifierTypeFromJSONTyped,
    IdentifierTypeToJSON,
    IdentifierTypeToJSONTyped,
} from './IdentifierType';
import type { Source } from './Source';
import {
    SourceFromJSON,
    SourceFromJSONTyped,
    SourceToJSON,
    SourceToJSONTyped,
} from './Source';

/**
 * 
 * @export
 * @interface CredentialSchema
 */
export interface CredentialSchema {
    /**
     * Unique identifier for the credential schema
     * @type {string}
     * @memberof CredentialSchema
     */
    id: string;
    /**
     * Name of the credential schema
     * @type {string}
     * @memberof CredentialSchema
     */
    name: string;
    /**
     * Version of the credential schema
     * @type {string}
     * @memberof CredentialSchema
     */
    version: string;
    /**
     * 
     * @type {IdentifierType}
     * @memberof CredentialSchema
     */
    identifierType?: IdentifierType;
    /**
     * External identifier of this schema
     * @type {string}
     * @memberof CredentialSchema
     */
    identifier?: string;
    /**
     * 
     * @type {Source}
     * @memberof CredentialSchema
     */
    source?: Source;
    /**
     * 
     * @type {Array<CredentialAttribute>}
     * @memberof CredentialSchema
     */
    attributes?: Array<CredentialAttribute>;
    /**
     * Date and time the credential attribute was created
     * @type {Date}
     * @memberof CredentialSchema
     */
    createdAt: Date;
    /**
     * Date and time the credential attribute was last updated
     * @type {Date}
     * @memberof CredentialSchema
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the CredentialSchema interface.
 */
export function instanceOfCredentialSchema(value: object): value is CredentialSchema {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function CredentialSchemaFromJSON(json: any): CredentialSchema {
    return CredentialSchemaFromJSONTyped(json, false);
}

export function CredentialSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CredentialSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'version': json['version'],
        'identifierType': json['identifierType'] == null ? undefined : IdentifierTypeFromJSON(json['identifierType']),
        'identifier': json['identifier'] == null ? undefined : json['identifier'],
        'source': json['source'] == null ? undefined : SourceFromJSON(json['source']),
        'attributes': json['attributes'] == null ? undefined : ((json['attributes'] as Array<any>).map(CredentialAttributeFromJSON)),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function CredentialSchemaToJSON(json: any): CredentialSchema {
    return CredentialSchemaToJSONTyped(json, false);
}

export function CredentialSchemaToJSONTyped(value?: CredentialSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'version': value['version'],
        'identifierType': IdentifierTypeToJSON(value['identifierType']),
        'identifier': value['identifier'],
        'source': SourceToJSON(value['source']),
        'attributes': value['attributes'] == null ? undefined : ((value['attributes'] as Array<any>).map(CredentialAttributeToJSON)),
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

