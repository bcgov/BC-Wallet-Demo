/* tslint:disable */
/* eslint-disable */
/**
 * Credential Showcase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CredentialDefinitionRevocation } from './CredentialDefinitionRevocation';
import {
    CredentialDefinitionRevocationFromJSON,
    CredentialDefinitionRevocationFromJSONTyped,
    CredentialDefinitionRevocationToJSON,
    CredentialDefinitionRevocationToJSONTyped,
} from './CredentialDefinitionRevocation';
import type { CredentialSchema } from './CredentialSchema';
import {
    CredentialSchemaFromJSON,
    CredentialSchemaFromJSONTyped,
    CredentialSchemaToJSON,
    CredentialSchemaToJSONTyped,
} from './CredentialSchema';
import type { Asset } from './Asset';
import {
    AssetFromJSON,
    AssetFromJSONTyped,
    AssetToJSON,
    AssetToJSONTyped,
} from './Asset';
import type { CredentialType } from './CredentialType';
import {
    CredentialTypeFromJSON,
    CredentialTypeFromJSONTyped,
    CredentialTypeToJSON,
    CredentialTypeToJSONTyped,
} from './CredentialType';
import type { CredentialDefinitionRepresentationsInner } from './CredentialDefinitionRepresentationsInner';
import {
    CredentialDefinitionRepresentationsInnerFromJSON,
    CredentialDefinitionRepresentationsInnerFromJSONTyped,
    CredentialDefinitionRepresentationsInnerToJSON,
    CredentialDefinitionRepresentationsInnerToJSONTyped,
} from './CredentialDefinitionRepresentationsInner';
import type { IdentifierType } from './IdentifierType';
import {
    IdentifierTypeFromJSON,
    IdentifierTypeFromJSONTyped,
    IdentifierTypeToJSON,
    IdentifierTypeToJSONTyped,
} from './IdentifierType';

/**
 * 
 * @export
 * @interface CredentialDefinition
 */
export interface CredentialDefinition {
    /**
     * Unique identifier for the credential definition
     * @type {string}
     * @memberof CredentialDefinition
     */
    id: string;
    /**
     * Name of the credential definition
     * @type {string}
     * @memberof CredentialDefinition
     */
    name: string;
    /**
     * 
     * @type {CredentialSchema}
     * @memberof CredentialDefinition
     */
    credentialSchema: CredentialSchema;
    /**
     * 
     * @type {IdentifierType}
     * @memberof CredentialDefinition
     */
    identifierType?: IdentifierType;
    /**
     * External identifier of this issuer
     * @type {string}
     * @memberof CredentialDefinition
     */
    identifier?: string;
    /**
     * Version of the credential definition
     * @type {string}
     * @memberof CredentialDefinition
     */
    version: string;
    /**
     * 
     * @type {CredentialType}
     * @memberof CredentialDefinition
     */
    type: CredentialType;
    /**
     * 
     * @type {Array<CredentialDefinitionRepresentationsInner>}
     * @memberof CredentialDefinition
     */
    representations?: Array<CredentialDefinitionRepresentationsInner>;
    /**
     * 
     * @type {CredentialDefinitionRevocation}
     * @memberof CredentialDefinition
     */
    revocation?: CredentialDefinitionRevocation;
    /**
     * 
     * @type {Asset}
     * @memberof CredentialDefinition
     */
    icon?: Asset;
    /**
     * Date and time the credential definition was created
     * @type {Date}
     * @memberof CredentialDefinition
     */
    createdAt: Date;
    /**
     * Date and time the credential definition was last updated
     * @type {Date}
     * @memberof CredentialDefinition
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the CredentialDefinition interface.
 */
export function instanceOfCredentialDefinition(value: object): value is CredentialDefinition {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('credentialSchema' in value) || value['credentialSchema'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function CredentialDefinitionFromJSON(json: any): CredentialDefinition {
    return CredentialDefinitionFromJSONTyped(json, false);
}

export function CredentialDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CredentialDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'credentialSchema': CredentialSchemaFromJSON(json['credentialSchema']),
        'identifierType': json['identifierType'] == null ? undefined : IdentifierTypeFromJSON(json['identifierType']),
        'identifier': json['identifier'] == null ? undefined : json['identifier'],
        'version': json['version'],
        'type': CredentialTypeFromJSON(json['type']),
        'representations': json['representations'] == null ? undefined : ((json['representations'] as Array<any>).map(CredentialDefinitionRepresentationsInnerFromJSON)),
        'revocation': json['revocation'] == null ? undefined : CredentialDefinitionRevocationFromJSON(json['revocation']),
        'icon': json['icon'] == null ? undefined : AssetFromJSON(json['icon']),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function CredentialDefinitionToJSON(json: any): CredentialDefinition {
    return CredentialDefinitionToJSONTyped(json, false);
}

export function CredentialDefinitionToJSONTyped(value?: CredentialDefinition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'credentialSchema': CredentialSchemaToJSON(value['credentialSchema']),
        'identifierType': IdentifierTypeToJSON(value['identifierType']),
        'identifier': value['identifier'],
        'version': value['version'],
        'type': CredentialTypeToJSON(value['type']),
        'representations': value['representations'] == null ? undefined : ((value['representations'] as Array<any>).map(CredentialDefinitionRepresentationsInnerToJSON)),
        'revocation': CredentialDefinitionRevocationToJSON(value['revocation']),
        'icon': AssetToJSON(value['icon']),
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

