/* tslint:disable */
/* eslint-disable */
/**
 * BC Wallet API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CredentialDefinition } from './CredentialDefinition';
import {
    CredentialDefinitionFromJSON,
    CredentialDefinitionFromJSONTyped,
    CredentialDefinitionToJSON,
    CredentialDefinitionToJSONTyped,
} from './CredentialDefinition';
import type { ShowcaseStatus } from './ShowcaseStatus';
import {
    ShowcaseStatusFromJSON,
    ShowcaseStatusFromJSONTyped,
    ShowcaseStatusToJSON,
    ShowcaseStatusToJSONTyped,
} from './ShowcaseStatus';
import type { Persona } from './Persona';
import {
    PersonaFromJSON,
    PersonaFromJSONTyped,
    PersonaToJSON,
    PersonaToJSONTyped,
} from './Persona';
import type { Asset } from './Asset';
import {
    AssetFromJSON,
    AssetFromJSONTyped,
    AssetToJSON,
    AssetToJSONTyped,
} from './Asset';
import type { Scenario } from './Scenario';
import {
    ScenarioFromJSON,
    ScenarioFromJSONTyped,
    ScenarioToJSON,
    ScenarioToJSONTyped,
} from './Scenario';

/**
 * 
 * @export
 * @interface Showcase
 */
export interface Showcase {
    /**
     * Unique identifier for the showcase
     * @type {string}
     * @memberof Showcase
     */
    id: string;
    /**
     * Name of the showcase
     * @type {string}
     * @memberof Showcase
     */
    name: string;
    /**
     * URL-friendly identifier for the showcase
     * @type {string}
     * @memberof Showcase
     */
    slug: string;
    /**
     * Description of the showcase
     * @type {string}
     * @memberof Showcase
     */
    description: string;
    /**
     * 
     * @type {ShowcaseStatus}
     * @memberof Showcase
     */
    status: ShowcaseStatus;
    /**
     * Whether the showcase is hidden from public view
     * @type {boolean}
     * @memberof Showcase
     */
    hidden: boolean;
    /**
     * List of scenarios in this showcase
     * @type {Array<Scenario>}
     * @memberof Showcase
     */
    scenarios: Array<Scenario>;
    /**
     * List of credential definitions used in this showcase
     * @type {Array<CredentialDefinition>}
     * @memberof Showcase
     */
    credentialDefinitions: Array<CredentialDefinition>;
    /**
     * List of personas involved in this showcase
     * @type {Array<Persona>}
     * @memberof Showcase
     */
    personas: Array<Persona>;
    /**
     * 
     * @type {Asset}
     * @memberof Showcase
     */
    bannerImage?: Asset;
    /**
     * Message to display when the showcase is completed
     * @type {string}
     * @memberof Showcase
     */
    completionMessage?: string;
    /**
     * Date and time the showcase was created
     * @type {Date}
     * @memberof Showcase
     */
    createdAt: Date;
    /**
     * Date and time the showcase was last updated
     * @type {Date}
     * @memberof Showcase
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the Showcase interface.
 */
export function instanceOfShowcase(value: object): value is Showcase {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('slug' in value) || value['slug'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('hidden' in value) || value['hidden'] === undefined) return false;
    if (!('scenarios' in value) || value['scenarios'] === undefined) return false;
    if (!('credentialDefinitions' in value) || value['credentialDefinitions'] === undefined) return false;
    if (!('personas' in value) || value['personas'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ShowcaseFromJSON(json: any): Showcase {
    return ShowcaseFromJSONTyped(json, false);
}

export function ShowcaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Showcase {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'slug': json['slug'],
        'description': json['description'],
        'status': ShowcaseStatusFromJSON(json['status']),
        'hidden': json['hidden'],
        'scenarios': ((json['scenarios'] as Array<any>).map(ScenarioFromJSON)),
        'credentialDefinitions': ((json['credentialDefinitions'] as Array<any>).map(CredentialDefinitionFromJSON)),
        'personas': ((json['personas'] as Array<any>).map(PersonaFromJSON)),
        'bannerImage': json['bannerImage'] == null ? undefined : AssetFromJSON(json['bannerImage']),
        'completionMessage': json['completionMessage'] == null ? undefined : json['completionMessage'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function ShowcaseToJSON(json: any): Showcase {
    return ShowcaseToJSONTyped(json, false);
}

export function ShowcaseToJSONTyped(value?: Showcase | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'slug': value['slug'],
        'description': value['description'],
        'status': ShowcaseStatusToJSON(value['status']),
        'hidden': value['hidden'],
        'scenarios': ((value['scenarios'] as Array<any>).map(ScenarioToJSON)),
        'credentialDefinitions': ((value['credentialDefinitions'] as Array<any>).map(CredentialDefinitionToJSON)),
        'personas': ((value['personas'] as Array<any>).map(PersonaToJSON)),
        'bannerImage': AssetToJSON(value['bannerImage']),
        'completionMessage': value['completionMessage'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

