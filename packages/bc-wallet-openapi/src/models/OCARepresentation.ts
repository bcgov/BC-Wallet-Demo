/* tslint:disable */
/* eslint-disable */
/**
 * Credential Showcase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Overlay Capture Architecture representation of a credential
 * @export
 * @interface OCARepresentation
 */
export interface OCARepresentation {
    /**
     * Unique identifier for the credential representation
     * @type {string}
     * @memberof OCARepresentation
     */
    id: string;
    /**
     * Date and time the credential representation was created
     * @type {Date}
     * @memberof OCARepresentation
     */
    createdAt: Date;
    /**
     * Date and time the credential representation was last updated
     * @type {Date}
     * @memberof OCARepresentation
     */
    updatedAt: Date;
    /**
     * Credential definition identifier in the OCA format
     * @type {string}
     * @memberof OCARepresentation
     */
    credDefId: string;
    /**
     * Schema identifier in the OCA format
     * @type {string}
     * @memberof OCARepresentation
     */
    schemaId: string;
    /**
     * URL to the OCA bundle for this representation
     * @type {string}
     * @memberof OCARepresentation
     */
    ocaBundleUrl?: string;
}

/**
 * Check if a given object implements the OCARepresentation interface.
 */
export function instanceOfOCARepresentation(value: object): value is OCARepresentation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('credDefId' in value) || value['credDefId'] === undefined) return false;
    if (!('schemaId' in value) || value['schemaId'] === undefined) return false;
    return true;
}

export function OCARepresentationFromJSON(json: any): OCARepresentation {
    return OCARepresentationFromJSONTyped(json, false);
}

export function OCARepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): OCARepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'credDefId': json['credDefId'],
        'schemaId': json['schemaId'],
        'ocaBundleUrl': json['ocaBundleUrl'] == null ? undefined : json['ocaBundleUrl'],
    };
}

export function OCARepresentationToJSON(json: any): OCARepresentation {
    return OCARepresentationToJSONTyped(json, false);
}

export function OCARepresentationToJSONTyped(value?: OCARepresentation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'credDefId': value['credDefId'],
        'schemaId': value['schemaId'],
        'ocaBundleUrl': value['ocaBundleUrl'],
    };
}

