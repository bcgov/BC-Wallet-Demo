/* tslint:disable */
/* eslint-disable */
/**
 * BC Wallet API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ShowcaseStatus } from './ShowcaseStatus';
import {
    ShowcaseStatusFromJSON,
    ShowcaseStatusFromJSONTyped,
    ShowcaseStatusToJSON,
    ShowcaseStatusToJSONTyped,
} from './ShowcaseStatus';

/**
 * 
 * @export
 * @interface ShowcaseRequest
 */
export interface ShowcaseRequest {
    /**
     * Name of the showcase
     * @type {string}
     * @memberof ShowcaseRequest
     */
    name: string;
    /**
     * Description of the showcase
     * @type {string}
     * @memberof ShowcaseRequest
     */
    description: string;
    /**
     * 
     * @type {ShowcaseStatus}
     * @memberof ShowcaseRequest
     */
    status: ShowcaseStatus;
    /**
     * Whether the showcase is hidden from public view
     * @type {boolean}
     * @memberof ShowcaseRequest
     */
    hidden: boolean;
    /**
     * List of scenarios in this showcase
     * @type {Array<string>}
     * @memberof ShowcaseRequest
     */
    scenarios: Array<string>;
    /**
     * List of credential definitions used in this showcase
     * @type {Array<string>}
     * @memberof ShowcaseRequest
     */
    credentialDefinitions: Array<string>;
    /**
     * List of personas involved in this showcase
     * @type {Array<string>}
     * @memberof ShowcaseRequest
     */
    personas: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShowcaseRequest
     */
    bannerImage?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowcaseRequest
     */
    completionMessage?: string;
}



/**
 * Check if a given object implements the ShowcaseRequest interface.
 */
export function instanceOfShowcaseRequest(value: object): value is ShowcaseRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('hidden' in value) || value['hidden'] === undefined) return false;
    if (!('scenarios' in value) || value['scenarios'] === undefined) return false;
    if (!('credentialDefinitions' in value) || value['credentialDefinitions'] === undefined) return false;
    if (!('personas' in value) || value['personas'] === undefined) return false;
    return true;
}

export function ShowcaseRequestFromJSON(json: any): ShowcaseRequest {
    return ShowcaseRequestFromJSONTyped(json, false);
}

export function ShowcaseRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShowcaseRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'status': ShowcaseStatusFromJSON(json['status']),
        'hidden': json['hidden'],
        'scenarios': json['scenarios'],
        'credentialDefinitions': json['credentialDefinitions'],
        'personas': json['personas'],
        'bannerImage': json['bannerImage'] == null ? undefined : json['bannerImage'],
        'completionMessage': json['completionMessage'] == null ? undefined : json['completionMessage'],
    };
}

export function ShowcaseRequestToJSON(json: any): ShowcaseRequest {
    return ShowcaseRequestToJSONTyped(json, false);
}

export function ShowcaseRequestToJSONTyped(value?: ShowcaseRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'status': ShowcaseStatusToJSON(value['status']),
        'hidden': value['hidden'],
        'scenarios': value['scenarios'],
        'credentialDefinitions': value['credentialDefinitions'],
        'personas': value['personas'],
        'bannerImage': value['bannerImage'],
        'completionMessage': value['completionMessage'],
    };
}

