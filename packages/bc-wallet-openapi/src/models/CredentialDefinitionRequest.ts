/* tslint:disable */
/* eslint-disable */
/**
 * BC Wallet API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CredentialType } from './CredentialType';
import {
    CredentialTypeFromJSON,
    CredentialTypeFromJSONTyped,
    CredentialTypeToJSON,
    CredentialTypeToJSONTyped,
} from './CredentialType';
import type { CredentialDefinitionRequestRevocation } from './CredentialDefinitionRequestRevocation';
import {
    CredentialDefinitionRequestRevocationFromJSON,
    CredentialDefinitionRequestRevocationFromJSONTyped,
    CredentialDefinitionRequestRevocationToJSON,
    CredentialDefinitionRequestRevocationToJSONTyped,
} from './CredentialDefinitionRequestRevocation';
import type { CredentialDefinitionRepresentationsInner } from './CredentialDefinitionRepresentationsInner';
import {
    CredentialDefinitionRepresentationsInnerFromJSON,
    CredentialDefinitionRepresentationsInnerFromJSONTyped,
    CredentialDefinitionRepresentationsInnerToJSON,
    CredentialDefinitionRepresentationsInnerToJSONTyped,
} from './CredentialDefinitionRepresentationsInner';
import type { IdentifierType } from './IdentifierType';
import {
    IdentifierTypeFromJSON,
    IdentifierTypeFromJSONTyped,
    IdentifierTypeToJSON,
    IdentifierTypeToJSONTyped,
} from './IdentifierType';

/**
 * 
 * @export
 * @interface CredentialDefinitionRequest
 */
export interface CredentialDefinitionRequest {
    /**
     * Name of the credential definition
     * @type {string}
     * @memberof CredentialDefinitionRequest
     */
    name: string;
    /**
     * 
     * @type {IdentifierType}
     * @memberof CredentialDefinitionRequest
     */
    identifierType?: IdentifierType;
    /**
     * External identifier of this schema
     * @type {string}
     * @memberof CredentialDefinitionRequest
     */
    identifier?: string;
    /**
     * Version of the credential definition
     * @type {string}
     * @memberof CredentialDefinitionRequest
     */
    version: string;
    /**
     * 
     * @type {CredentialType}
     * @memberof CredentialDefinitionRequest
     */
    type: CredentialType;
    /**
     * Reference to the associated credential schema
     * @type {string}
     * @memberof CredentialDefinitionRequest
     */
    credentialSchema: string;
    /**
     * List of representations for this credential definition
     * @type {Array<CredentialDefinitionRepresentationsInner>}
     * @memberof CredentialDefinitionRequest
     */
    representations?: Array<CredentialDefinitionRepresentationsInner>;
    /**
     * 
     * @type {CredentialDefinitionRequestRevocation}
     * @memberof CredentialDefinitionRequest
     */
    revocation?: CredentialDefinitionRequestRevocation;
    /**
     * 
     * @type {string}
     * @memberof CredentialDefinitionRequest
     */
    icon: string;
}



/**
 * Check if a given object implements the CredentialDefinitionRequest interface.
 */
export function instanceOfCredentialDefinitionRequest(value: object): value is CredentialDefinitionRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('credentialSchema' in value) || value['credentialSchema'] === undefined) return false;
    if (!('icon' in value) || value['icon'] === undefined) return false;
    return true;
}

export function CredentialDefinitionRequestFromJSON(json: any): CredentialDefinitionRequest {
    return CredentialDefinitionRequestFromJSONTyped(json, false);
}

export function CredentialDefinitionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CredentialDefinitionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'identifierType': json['identifierType'] == null ? undefined : IdentifierTypeFromJSON(json['identifierType']),
        'identifier': json['identifier'] == null ? undefined : json['identifier'],
        'version': json['version'],
        'type': CredentialTypeFromJSON(json['type']),
        'credentialSchema': json['credentialSchema'],
        'representations': json['representations'] == null ? undefined : ((json['representations'] as Array<any>).map(CredentialDefinitionRepresentationsInnerFromJSON)),
        'revocation': json['revocation'] == null ? undefined : CredentialDefinitionRequestRevocationFromJSON(json['revocation']),
        'icon': json['icon'],
    };
}

export function CredentialDefinitionRequestToJSON(json: any): CredentialDefinitionRequest {
    return CredentialDefinitionRequestToJSONTyped(json, false);
}

export function CredentialDefinitionRequestToJSONTyped(value?: CredentialDefinitionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'identifierType': IdentifierTypeToJSON(value['identifierType']),
        'identifier': value['identifier'],
        'version': value['version'],
        'type': CredentialTypeToJSON(value['type']),
        'credentialSchema': value['credentialSchema'],
        'representations': value['representations'] == null ? undefined : ((value['representations'] as Array<any>).map(CredentialDefinitionRepresentationsInnerToJSON)),
        'revocation': CredentialDefinitionRequestRevocationToJSON(value['revocation']),
        'icon': value['icon'],
    };
}

