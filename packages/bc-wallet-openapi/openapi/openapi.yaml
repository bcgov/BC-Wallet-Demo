openapi: 3.0.3
info:
  title: Credential Showcase API
  version: 0.1.1

servers:
  - url: https://virtserver.swaggerhub.com/SphereonInt/showcase/0.1.0/v1
    description: SwaggerHub API Auto Mocking
  - url: https://bcshowcase-api-dev.nborbit.ca/

tags:
  - name: Showcases
    description: Endpoints for managing showcases
  - name: Issuance Scenario
    description: Endpoints related to credential issuance scenarios
  - name: Presentation Scenario
    description: Endpoints related to credential presentation scenarios
  - name: Issuer Role
    description: Endpoints for managing the Issuer role
  - name: Relying Party Role
    description: Endpoints for managing the Relying Party (verifier) role
  - name: Personas
    description: Endpoints related to persona management
  - name: Credential Definitions
    description: Endpoints for creating and managing credential definitions
  - name: Assets
    description: Endpoints related to media or static assets
  - name: Tenants
    description: Endpoints related to tenants

security:
  - OAuth2: [ ]
  - OIDC: [ ]

paths:
  /scenarios/issuances:
    get:
      tags:
        - Issuance Scenario
      summary: List all issuance scenarios
      operationId: listIssuanceScenarios
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceScenariosResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Issuance Scenario
      summary: Create a new issuance scenario
      operationId: createIssuanceScenario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuanceScenarioRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceScenarioResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /scenarios/issuances/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [ "Issuance Scenario" ]
      summary: Retrieve a single issuance scenario
      operationId: getIssuanceScenario
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceScenarioResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Issuance Scenario" ]
      summary: Update an issuance scenario (overwrite)
      operationId: updateIssuanceScenario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuanceScenarioRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceScenarioResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Issuance Scenario" ]
      summary: Delete an issuance scenario
      operationId: deleteIssuanceScenario
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /scenarios/issuances/{slug}/steps:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "Issuance Scenario"
      summary: List steps in an issuance scenario
      operationId: listIssuanceScenarioSteps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [ "Issuance Scenario" ]
      summary: Add a step to an issuance scenario
      operationId: createIssuanceScenarioStep
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /scenarios/issuances/{slug}/steps/{stepId}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      - name: stepId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [ "Issuance Scenario" ]
      summary: Retrieve a specific step in an issuance scenario
      operationId: getIssuanceScenarioStep
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Issuance Scenario" ]
      summary: Overwrite a step in an issuance scenario
      operationId: updateIssuanceScenarioStep
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Issuance Scenario" ]
      summary: Delete a step in an issuance scenario
      operationId: deleteIssuanceScenarioStep
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /scenarios/issuances/{slug}/steps/{stepId}/actions:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      - name: stepId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [ "Issuance Scenario" ]
      summary: List actions in a step
      operationId: listStepActions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepActionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [ "Issuance Scenario" ]
      summary: Create an action in a step
      operationId: createStepAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepActionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /scenarios/issuances/{slug}/steps/{stepId}/actions/{actionId}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      - name: stepId
        in: path
        required: true
        schema:
          type: string
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [ "Issuance Scenario" ]
      summary: Retrieve a single action
      operationId: getStepAction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Issuance Scenario" ]
      summary: Overwrite an action
      operationId: updateStepAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepActionRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Issuance Scenario" ]
      summary: Delete an action
      operationId: deleteStepAction
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /scenarios/presentations:
    get:
      tags:
        - Presentation Scenario
      summary: List all presentation scenarios
      operationId: listPresentationScenarios
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationScenariosResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Presentation Scenario
      summary: Create a new presentation scenario
      operationId: createPresentationScenario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationScenarioRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationScenario'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /scenarios/presentations/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [ "Presentation Scenario" ]
      summary: Retrieve a single presentation scenario
      operationId: getPresentationScenario
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationScenario'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Presentation Scenario" ]
      summary: Update a presentation scenario (overwrite)
      operationId: updatePresentationScenario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationScenarioRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationScenario'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Presentation Scenario" ]
      summary: Delete a presentation scenario
      operationId: deletePresentationScenario
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /scenarios/presentations/{slug}/steps:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - "Presentation Scenario"
      summary: List steps in a presentation scenario
      operationId: listPresentationScenarioSteps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [ "Presentation Scenario" ]
      summary: Add a step to a presentation scenario
      operationId: createPresentationScenarioStep
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /scenarios/presentations/{slug}/steps/{stepId}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      - name: stepId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [ "Presentation Scenario" ]
      summary: Retrieve a specific step in a presentation scenario
      operationId: getPresentationScenarioStep
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Presentation Scenario" ]
      summary: Overwrite a step in a presentation scenario
      operationId: updatePresentationScenarioStep
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Presentation Scenario" ]
      summary: Delete a step in a presentation scenario
      operationId: deletePresentationScenarioStep
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /scenarios/presentations/{slug}/steps/{stepId}/actions:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      - name: stepId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [ "Presentation Scenario" ]
      summary: List actions in a step
      operationId: listPresentationScenarioStepActions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepActionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [ "Presentation Scenario" ]
      summary: Create an action in a step
      operationId: createPresentationScenarioStepAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepActionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /scenarios/presentations/{slug}/steps/{stepId}/actions/{actionId}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      - name: stepId
        in: path
        required: true
        schema:
          type: string
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [ "Presentation Scenario" ]
      summary: Retrieve a single action
      operationId: getPresentationScenarioStepAction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Presentation Scenario" ]
      summary: Overwrite an action
      operationId: updatePresentationScenarioStepAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepActionRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Presentation Scenario" ]
      summary: Delete an action
      operationId: deletePresentationScenarioStepAction
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /credentials/definitions:
    get:
      tags:
        - Credential Definitions
      summary: List credential definitions
      operationId: listCredentialDefinitions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Credential Definitions
      summary: Create a credential definition
      operationId: createCredentialDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialDefinitionRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /credentials/definitions/{definitionId}:
    parameters:
      - name: definitionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Credential Definitions
      summary: Get a specific credential definition
      operationId: getCredentialDefinition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Credential Definitions
      summary: Update a credential definition
      operationId: updateCredentialDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialDefinitionRequest'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Credential Definitions
      summary: Delete a credential definition
      operationId: deleteCredentialDefinition
      responses:
        '204':
          description: Deleted
  /credentials/definitions/{definitionId}/approve:
    parameters:
      - name: definitionId
        in: path
        required: true
        schema:
          type: string
        description: The ID of the credential definition to approve.
    post:
      tags:
        - Approval
        - Showcases
      summary: Approve a specific credential definition
      description: Marks a specific credential definition as approved, setting the 'approvedBy' and 'approvedAt' fields. Requires appropriate permissions.
      operationId: approveCredentialDefinition
      responses:
        '200':
          description: Credential definition approved successfully. Returns the updated definition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /credentials/schemas:
    get:
      tags:
        - Credential Definitions
      summary: List credential schemas
      operationId: listCredentialSchemas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialSchemasResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Credential Definitions
      summary: Create a credential schema
      operationId: createCredentialSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialSchemaRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialSchemaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /credentials/schemas/{credentialSchema}:
    parameters:
      - name: credentialSchema
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Credential Definitions
      summary: Get a specific credential schema
      operationId: getCredentialSchema
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialSchemaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Credential Definitions
      summary: Update a credential schema
      operationId: updateCredentialSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialSchemaRequest'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialSchemaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Credential Definitions
      summary: Delete a credential schema
      operationId: deleteCredentialSchema
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /personas:
    get:
      tags:
        - Personas
      summary: List personas
      operationId: listPersonas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonasResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Personas
      summary: Create a persona
      operationId: createPersona
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonaRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /personas/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Personas
      summary: Get a specific persona
      operationId: getPersona
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Personas
      summary: Update a persona
      operationId: updatePersona
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonaRequest'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Personas
      summary: Delete a persona
      operationId: deletePersona
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /assets:
    get:
      tags:
        - Assets
      summary: List assets
      operationId: listAssets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Assets
      summary: Create an asset
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assets/{assetId}:
    parameters:
      - name: assetId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Assets
      summary: Get a specific asset
      operationId: getAsset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Assets
      summary: Update an asset
      operationId: updateAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetRequest'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Assets
      summary: Delete an asset
      operationId: deleteAsset
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assets/{assetId}/file:
    parameters:
      - name: assetId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Assets
      summary: Retrieve a specific asset as file
      operationId: getAssetAsFile
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/issuers:
    get:
      tags:
        - Issuer Role
      summary: List all issuers
      operationId: listIssuers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Issuer Role
      summary: Create a new issuer
      operationId: createIssuer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /roles/issuers/{issuerId}:
    parameters:
      - name: issuerId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Issuer Role
      summary: Get a specific issuer
      operationId: getIssuer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Issuer Role
      summary: Update an issuer
      operationId: updateIssuer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Issuer Role
      summary: Delete an issuer
      operationId: deleteIssuer
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/relying-parties:
    get:
      tags:
        - Relying Party Role
      summary: List all relying parties
      operationId: listRelyingParties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingPartiesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Relying Party Role
      summary: Create a new relying party
      operationId: createRelyingParty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelyingPartyRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingPartyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /roles/relying-parties/{relyingPartyId}:
    parameters:
      - name: relyingPartyId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Relying Party Role
      summary: Get a specific relying party
      operationId: getRelyingParty
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingPartyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Relying Party Role
      summary: Update a relying party
      operationId: updateRelyingParty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelyingPartyRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingPartyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Relying Party Role
      summary: Delete a relying party
      operationId: deleteRelyingParty
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # Add to the paths section:

  /tenants:
    get:
      tags:
        - Tenants
      summary: List all tenants
      operationId: listTenants
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Tenants
      summary: Create a new tenant
      operationId: createTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tenants/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Tenants
      summary: Get a specific tenant
      operationId: getTenant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Tenants
      summary: Update a tenant
      operationId: updateTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Tenants
      summary: Delete a tenant
      operationId: deleteTenant
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /showcases:
    get:
      tags:
        - Showcases
      summary: List all showcases
      operationId: listShowcases
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShowcasesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Showcases
      summary: Create a new showcase
      operationId: createShowcase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowcaseRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowcaseResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /showcases/{slug}:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Showcases
      summary: Get a specific showcase
      operationId: getShowcase
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowcaseResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Showcases
      summary: Update a showcase
      operationId: updateShowcase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowcaseRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowcaseResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Showcases
      summary: Delete a showcase
      operationId: deleteShowcase
      responses:
        '204':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating the showcase was deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /showcases/{slug}/approve:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
        description: The slug of the showcase to approve.
    post:
      tags:
        - Approval
        - Showcases
      summary: Approve a specific showcase
      description: Marks a specific showcase as approved, setting the 'approvedBy' and 'approvedAt' fields. Requires appropriate permissions.
      operationId: approveShowcase
      responses:
        '200':
          description: Showcase approved successfully. Returns the updated showcase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowcaseResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /approvals/pending:
    get:
      tags:
        - Approval
      summary: Get all unapproved showcases and credential definitions
      description: Retrieves lists of showcases and credential definitions that are awaiting approval (i.e., where 'approvedAt' is null).
      operationId: getPendingApprovals
      responses:
        '200':
          description: A list of unapproved items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingApprovalsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: <https://auth.example.com/oauth/authorize>
          tokenUrl: <https://auth.example.com/oauth/token>
          scopes:
            editor: Grants editor access
            admin: Grants admin access
            viewer: Grants viewer access
    OIDC:
      type: openIdConnect
      openIdConnectUrl: <https://auth.example.com/.well-known/openid-configuration>
      description: OpenID Connect security scheme for OAuth2 flows
  schemas:
    Tenant:
      type: object
      required:
        - id
        - createdAt
      properties:
        id:
          type: string
          description: Unique identifier for the tenant
          example: 8832be1c-5dc3-46bb-9e21-fbca4f7bcffc
        createdAt:
          type: string
          description: Date and time the tenant was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the asset was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        deletedAt:
          type: string
          description: Date and time the tenant was deleted (if applicable)
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    TenantRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Unique identifier for the tenant
          example: 8832be1c-5dc3-46bb-9e21-fbca4f7bcffc
    TenantResponse:
      type: object
      required:
        - tenant
      properties:
        tenant:
          $ref: '#/components/schemas/Tenant'
    TenantsResponse:
      type: object
      required:
        - tenants
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/Tenant'
    PendingApprovalsResponse:
      type: object
      description: Contains lists of showcases and credential definitions pending approval.
      properties:
        showcases:
          type: array
          description: List of showcases pending approval.
          items:
            $ref: '#/components/schemas/Showcase'
        credentialDefinitions:
          type: array
          description: List of credential definitions pending approval.
          items:
            $ref: '#/components/schemas/CredentialDefinition'

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user
          example: 123e4567-e89b-12d3-a456-426614174456
        userName:
          type: string
        issuer:
          type: string
        clientId:
          type: string
        createdAt:
          type: string
          description: Date and time the asset was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the asset was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    Asset:
      type: object
      required:
        - id
        - mediaType
        - content
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the asset in the database
          example: 123e4567-e89b-12d3-a456-426614174469
        mediaType:
          type: string
          description: Type of asset (e.g., image, document, icon)
          example: image/jpeg
        content:
          type: string
          description: Binary data of the asset
          example: base64 encoded binary data
        fileName:
          type: string
          description: Name of the asset file
          example: asset.jpg
        description:
          type: string
          description: Description of the asset
          example: A beautiful image of a cat
        createdAt:
          type: string
          description: Date and time the asset was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the asset was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    AssetRequest:
      type: object
      required:
        - mediaType
        - content
      properties:
        mediaType:
          type: string
          description: Type of asset (e.g., image, document, icon)
          example: image/jpeg
        content:
          type: string
          description: Binary data of the asset
          example: base64 encoded binary data
        fileName:
          type: string
          description: Name of the asset file
          example: asset.jpg
        description:
          type: string
          description: Description of the asset
          example: A beautiful image of a cat
    AssetsResponse:
      type: object
      required:
        - assets
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    AssetResponse:
      type: object
      required:
        - asset
      properties:
        asset:
          $ref: '#/components/schemas/Asset'

    Step:
      type: object
      required:
        - id
        - title
        - description
        - order
        - type
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the step
          example: 123e4567-e89b-12d3-a456-434314174000
        title:
          type: string
          description: Title of the step
          example: Verify Identity
        description:
          type: string
          description: Detailed description of the step
          example: Verify the user's identity
        order:
          type: integer
          description: Order of the step in the scenario
          minimum: 0
          example: 1
        type:
          $ref: '#/components/schemas/StepType'
        subScenario:
          type: string
          description: Optional sub-scenario for this step
          example: 123e4567-e89b-12d3-a456-434314174000
        actions:
          type: array
          items:
            $ref: '#/components/schemas/StepAction'
        asset:
          $ref: '#/components/schemas/Asset'
        createdAt:
          type: string
          description: Date and time the step was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the step was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    StepRequest:
      type: object
      required:
        - title
        - description
        - order
        - type
        - actions
      properties:
        title:
          type: string
          description: Title of the step
          example: Verify Identity
        description:
          type: string
          description: Detailed description of the step
          example: Verify the user's identity
        order:
          type: integer
          description: Order of the step in the scenario
          minimum: 0
          example: 1
        type:
          $ref: '#/components/schemas/StepType'
        subScenario:
          type: string
          description: Optional sub-scenario for this step
          example: 123e4567-e89b-12d3-a456-434314174000
        actions:
          type: array
          description: List of actions associated with this step
          items:
            oneOf:
              - $ref: '#/components/schemas/StepActionRequest'
        asset:
          type: string
          description: Asset referenced by this step
          example: 456e4567-e89b-12d3-a456-426614174000
    StepsResponse:
      properties:
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'
    StepResponse:
      properties:
        step:
          $ref: '#/components/schemas/Step'

    StepType:
      type: string
      enum:
        - HUMAN_TASK
        - SERVICE
        - SCENARIO
      description: Type of step in the scenario
      example: HUMAN_TASK

    StepAction:
      type: object
      required:
        - id
        - actionType
        - title
        - text
      #        - createdAt  FIXME This gives issues with the individual step types, they do not all have *Request variants yet
      #        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the action
          example: 123e4567-ef2d-12d3-abcd-426614174456
        actionType:
          $ref: '#/components/schemas/StepActionType'
        title:
          type: string
          description: Title of the action
          example: Connect Wallet
        text:
          type: string
          description: Descriptive text for the action
          example: Connect your wallet to continue
        createdAt:
          type: string
          description: Date and time the step action was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the step action was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
      discriminator:
        propertyName: actionType
        mapping:
          ARIES_OOB: '#/components/schemas/AriesOOBAction'
          ACCEPT_CREDENTIAL: '#/components/schemas/AcceptCredentialAction'
          SHARE_CREDENTIAL: '#/components/schemas/ShareCredentialAction'
          SETUP_CONNECTION: '#/components/schemas/SetupConnectionAction'
          CHOOSE_WALLET: '#/components/schemas/ChooseWalletAction'
          BUTTON: '#/components/schemas/ButtonAction'
    StepActionRequest:
      type: object
      required:
        - actionType
        - title
        - text
      properties:
        title:
          type: string
          description: Title of the action
          example: Connect Wallet
        text:
          type: string
          description: Descriptive text for the action
          example: Connect your wallet to continue
        actionType:
          $ref: '#/components/schemas/StepActionType'
      discriminator:
        propertyName: actionType
        mapping:
          ARIES_OOB: '#/components/schemas/AriesOOBActionRequest'
          ACCEPT_CREDENTIAL: '#/components/schemas/AcceptCredentialActionRequest'
          SHARE_CREDENTIAL: '#/components/schemas/ShareCredentialActionRequest'
          SETUP_CONNECTION: '#/components/schemas/SetupConnectionActionRequest'
          CHOOSE_WALLET: '#/components/schemas/ChooseWalletActionRequest'
          BUTTON: '#/components/schemas/ButtonActionRequest'
    StepActionsResponse:
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/StepAction'
    StepActionResponse:
      properties:
        action:
          $ref: '#/components/schemas/StepAction'

    StepActionType:
      type: string
      enum:
        - ARIES_OOB
        - ACCEPT_CREDENTIAL
        - SHARE_CREDENTIAL
        - SETUP_CONNECTION
        - CHOOSE_WALLET
        - BUTTON
      description: Type of action
      example: ARIES_OOB

    AriesOOBAction:
      allOf:
        - $ref: '#/components/schemas/StepAction'
        - type: object
          required:
            - proofRequest
          properties:
            proofRequest:
              $ref: '#/components/schemas/AriesProofRequest'
    AriesOOBActionRequest:
      allOf:
        - $ref: '#/components/schemas/StepActionRequest'
        - type: object
          required:
            - proofRequest
          properties:
            proofRequest:
              $ref: '#/components/schemas/AriesProofRequestRequest'
    AriesProofRequest:
      type: object
      required:
        - id
        - attributes
        - predicates
      #        - createdAt FIXME This gives issues with the individual step types, they do not all have *Request variants yet
      #        - updatedAt
      properties:
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AriesRequestCredentialAttributes'
          description: Map of attribute groups requested in the proof
          example:
            name:
              value: John Doe
        predicates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AriesRequestCredentialPredicates'
          description: Map of predicate groups requested in the proof
          example:
            age:
              value: 30
        createdAt:
          type: string
          description: Date and time the Aries proof request was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the Aries proof request was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    AriesProofRequestRequest:
      type: object
      required:
        - id
        - attributes
        - predicates
      properties:
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AriesRequestCredentialAttributes'
          description: Map of attribute groups requested in the proof
          example:
            name:
              value: John Doe
        predicates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AriesRequestCredentialPredicates'
          description: Map of predicate groups requested in the proof
          example:
            age:
              value: 30
    AriesRequestCredentialAttributes:
      type: object
      properties:
        attributes:
          type: array
          items:
            type: string
            description: Name of the attribute to be included in the proof
            example: name
          description: List of attribute names to be included in the proof
        restrictions:
          type: array
          items:
            type: string
            description: Name of the restriction to be included in the proof
            example: age
          description: List of restrictions on the requested attributes
    AriesRequestCredentialPredicates:
      type: object
      required:
        - name
        - type
        - value
        - restrictions
      properties:
        name:
          type: string
          description: Name of the attribute for predicate
          example: age
        type:
          type: string
          description: Type of predicate (e.g., >=, <=, etc.)
          example: '>='
        value:
          type: string
          description: Value to compare against
          example: '30'
        restrictions:
          type: array
          items:
            type: string
          description: List of restrictions on the predicate
    AcceptCredentialAction:
      allOf:
        - $ref: '#/components/schemas/StepAction'
        - type: object
          required:
            - credentialDefinitionId
          properties:
            credentialDefinitionId:
              type: string
              description: Credential definition ID
              example: 123e4567-e89b-12d3-a456-426614174456
            connectionId:
              type: string
              description: Connection ID
              example: 341c384b-3313-41ba-96a7-4f07329cd6b5
    ShareCredentialAction:
      allOf:
        - $ref: '#/components/schemas/StepAction'
        - type: object
          required:
            - credentialDefinitionId
          properties:
            credentialDefinitionId:
              type: string
              description: Credential definition ID
              example: 123e4567-e89b-12d3-a456-426614174456
            connectionId:
              type: string
              description: Connection ID
              example: 341c384b-3313-41ba-96a7-4f07329cd6b5
    SetupConnectionAction:
      allOf:
        - $ref: '#/components/schemas/StepAction'
        - type: object
      # TODO properties?
    ChooseWalletAction:
      allOf:
        - $ref: '#/components/schemas/StepAction'
        - type: object
      # TODO properties?
    ButtonAction:
      allOf:
        - $ref: '#/components/schemas/StepAction'
        - type: object
          properties:
            goToStep:
              type: string
              description: Step ID
              example: 123e4567-e89b-12d3-a456-426614174456

    AcceptCredentialActionRequest:
      allOf:
        - $ref: '#/components/schemas/StepActionRequest'
        - type: object
          required:
            - credentialDefinitionId
          properties:
            credentialDefinitionId:
              type: string
              description: Credential definition ID
              example: 123e4567-e89b-12d3-a456-426614174456
            connectionId:
              type: string
              description: Connection ID
              example: 341c384b-3313-41ba-96a7-4f07329cd6b5

    ShareCredentialActionRequest:
      allOf:
        - $ref: '#/components/schemas/StepActionRequest'
        - type: object
          required:
            - credentialDefinitionId
          properties:
            credentialDefinitionId:
              type: string
              description: Credential definition ID
              example: 123e4567-e89b-12d3-a456-426614174456
            connectionId:
              type: string
              description: Connection ID
              example: 341c384b-3313-41ba-96a7-4f07329cd6b5

    SetupConnectionActionRequest:
      allOf:
        - $ref: '#/components/schemas/StepActionRequest'
        - type: object

    ChooseWalletActionRequest:
      allOf:
        - $ref: '#/components/schemas/StepActionRequest'
        - type: object

    ButtonActionRequest:
      allOf:
        - $ref: '#/components/schemas/StepActionRequest'
        - type: object
          properties:
            goToStep:
              type: string
              description: Step ID
              example: 123e4567-e89b-12d3-a456-426614174456

    Persona:
      type: object
      required:
        - id
        - name
        - slug
        - role
        - description
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the persona
          example: 123e4567-e89b-12d3-a456-426614174456
        name:
          type: string
          description: Name of the persona
          example: John Doe
        slug:
          type: string
          description: URL-friendly identifier for the persona
          example: john-doe
        role:
          type: string
          description: Role of the persona in the system
          example: Verifier
        description:
          type: string
          description: Detailed description of the persona
          example: John Doe is a verifier for the system
        headshotImage:
          $ref: '#/components/schemas/Asset'
        bodyImage:
          $ref: '#/components/schemas/Asset'
        hidden:
          type: boolean
          description: Whether the persona is hidden from the user
          example: false
        createdAt:
          type: string
          description: Date and time the persona was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the persona was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    PersonaRequest:
      type: object
      required:
        - name
        - role
      properties:
        name:
          type: string
          description: Name of the persona
          example: John Doe
        role:
          type: string
          description: Role of the persona in the system
          example: Verifier
        description:
          type: string
          description: Detailed description of the persona
          example: John Doe is a verifier for the system
        headshotImage:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174456
        bodyImage:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174877
        hidden:
          type: boolean
          description: Whether the persona is hidden from the user
          example: false
    PersonasResponse:
      properties:
        personas:
          type: array
          items:
            $ref: '#/components/schemas/Persona'
    PersonaResponse:
      type: object
      properties:
        persona:
          $ref: '#/components/schemas/Persona'

    Scenario:
      type: object
      required:
        - id
        - name
        - slug
        - type
        - description
        - steps
        - personas
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the scenario
          example: 789e4567-e89b-12d3-a456-434314174123
        name:
          type: string
          description: Name of the scenario
          example: Credential Issuance
        slug:
          type: string
          description: URL-friendly identifier for the scenario
          example: credential-issuance
        description:
          type: string
          description: Detailed description of the scenario
          example: This scenario issues credentials to users
        type:
          $ref: '#/components/schemas/ScenarioType'
        steps:
          type: array
          description: Ordered list of steps in the scenario
          items:
            $ref: '#/components/schemas/Step'
        personas:
          type: array
          description: References to personas used in this scenario
          items:
            $ref: '#/components/schemas/Persona'
        hidden:
          type: boolean
          description: Whether the workflow is hidden from the user
          example: false
        createdAt:
          type: string
          description: Date and time the scenario was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the scenario was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    ScenarioRequest:
      type: object
      required:
        - name
        - type
        - description
        - steps
        - personas
      properties:
        name:
          type: string
          description: Name of the scenario
          example: Credential Issuance
        description:
          type: string
          description: Detailed description of the scenario
          example: This scenario issues credentials to users
        steps:
          type: array
          description: Ordered list of steps in the scenario
          items:
            $ref: '#/components/schemas/StepRequest'
        personas:
          type: array
          description: References to personas used in this scenario
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174456
        hidden:
          type: boolean
          description: Whether the workflow is hidden from the user
          example: false

    IssuanceScenariosResponse:
      type: object
      properties:
        issuanceScenarios:
          type: array
          items:
            $ref: '#/components/schemas/IssuanceScenario'
    IssuanceScenarioResponse:
      type: object
      properties:
        issuanceScenario:
          $ref: '#/components/schemas/IssuanceScenario'
    IssuanceScenario:
      type: object
      allOf:
        - $ref: '#/components/schemas/Scenario'
        - type: object
          required:
            - issuer
          properties:
            issuer:
              $ref: '#/components/schemas/Issuer'
            type:
              type: string
              enum:
                - "ISSUANCE"
      description: Scenario specialization for credential issuance
    IssuanceScenarioRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/ScenarioRequest'
        - type: object
          required:
            - issuer
          properties:
            issuer:
              type: string
              example: "313e4567-e89b-12d3-a456-426614174469"
      description: Scenario specialization for credential issuance

    PresentationScenariosResponse:
      type: object
      properties:
        presentationScenarios:
          type: array
          items:
            $ref: '#/components/schemas/PresentationScenario'
    PresentationScenarioResponse:
      type: object
      properties:
        presentationScenario:
          $ref: '#/components/schemas/PresentationScenario'
    PresentationScenario:
      type: object
      allOf:
        - $ref: '#/components/schemas/Scenario'
        - type: object
          required:
            - relyingParty
          properties:
            relyingParty:
              $ref: '#/components/schemas/RelyingParty'
            type:
              type: string
              enum:
                - "PRESENTATION"
      description: Scenario specialization for credential presentation
    PresentationScenarioRequest:
      allOf:
        - $ref: '#/components/schemas/ScenarioRequest'
        - type: object
          required:
            - relyingParty
          properties:
            relyingParty:
              type: string
              example: "313e4567-e89b-12d3-a456-426614174469"

    IdentifierType:
      type: string
      enum:
        - DID
      description: Types of supported identifiers
      example: DID

    Source:
      type: string
      enum:
        - IMPORTED
        - CREATED
      description: Types of supported origins
      example: CREATED
      default: CREATED

    IssuerType:
      type: string
      enum:
        - ARIES
      description: Types of supported issuers

    RelyingPartyType:
      type: string
      enum:
        - ARIES
      description: Types of supported relying parties

    Issuer:
      type: object
      required:
        - id
        - name
        - description
        - type
        - credentialDefinitions
        - credentialSchemas
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the issuer
          example: 123e4567-e89b-12d3-abcd-426614174456
        name:
          type: string
          description: Name of the issuer
          example: Issuer Name
        description:
          type: string
          description: Detailed description of the issuer
          example: This issuer issues credentials to users
        type:
          $ref: '#/components/schemas/IssuerType'
        organization:
          type: string
          description: Organization the issuer belongs to
          example: Acme Corporation
        logo:
          $ref: '#/components/schemas/Asset'
        credentialDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/CredentialDefinition'
        credentialSchemas:
          type: array
          items:
            $ref: '#/components/schemas/CredentialSchema'
        createdAt:
          type: string
          description: Date and time the issuer was created
          format: date-time
          example: "2025-03-06T11:30:16.573Z"
        updatedAt:
          type: string
          description: Date and time the issuer was last updated
          format: date-time
          example: "2025-03-06T11:30:16.573Z"
    IssuerRequest:
      type: object
      required:
        - name
        - description
        - type
        - credentialDefinitions
        - credentialSchemas
      properties:
        name:
          type: string
          description: Name of the issuer
          example: Issuer Name
        description:
          type: string
          description: Detailed description of the issuer
          example: This issuer issues credentials to users
        type:
          $ref: '#/components/schemas/IssuerType'
        identifierType:
          $ref: '#/components/schemas/IdentifierType'
        identifier:
          type: string
          description: External identifier of this issuer
          example: did:sov:XUeUZauFLeBNofY3NhaZCB
        organization:
          type: string
          description: Organization the issuer belongs to
          example: Acme Corporation
        logo:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174469
        credentialDefinitions:
          type: array
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174469
        credentialSchemas:
          type: array
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174469
    IssuersResponse:
      type: object
      properties:
        issuers:
          type: array
          items:
            $ref: '#/components/schemas/Issuer'
    IssuerResponse:
      type: object
      properties:
        issuer:
          $ref: '#/components/schemas/Issuer'

    RelyingParty:
      type: object
      required:
        - id
        - name
        - description
        - type
        - credentialDefinitions
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the relying party
          example: 76543210-e89b-12d3-a456-426614174469
        name:
          type: string
          description: Name of the relying party
          example: Relying Party Name
        description:
          type: string
          description: Detailed description of the relying party
          example: This relying party verifies credentials from issuers
        type:
          $ref: '#/components/schemas/RelyingPartyType'
        organization:
          type: string
          description: Organization the relying party belongs to
          example: Acme Corporation
        logo:
          $ref: '#/components/schemas/Asset'
        credentialDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/CredentialDefinition'
        createdAt:
          type: string
          description: Date and time the relying party was created
          format: date-time
          example: "2025-03-06T11:30:16.573Z"
        updatedAt:
          type: string
          description: Date and time the relying party was last updated
          format: date-time
          example: "2025-03-06T11:30:16.573Z"
    RelyingPartyRequest:
      type: object
      required:
        - name
        - type
        - description
        - credentialDefinitions
      properties:
        name:
          type: string
          description: Name of the relying party
          example: Relying Party Name
        description:
          type: string
          description: Detailed description of the relying party
          example: This relying party verifies credentials from issuers
        type:
          $ref: '#/components/schemas/RelyingPartyType'
        organization:
          type: string
          description: Organization the relying party belongs to
          example: Acme Corporation
        logo:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174469
        credentialDefinitions:
          type: array
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174469
    RelyingPartiesResponse:
      type: object
      properties:
        relyingParties:
          type: array
          items:
            $ref: '#/components/schemas/RelyingParty'
    RelyingPartyResponse:
      type: object
      properties:
        relyingParty:
          $ref: '#/components/schemas/RelyingParty'

    CredentialType:
      type: string
      enum:
        - ANONCRED
      description: Types of supported credentials

    CredentialAttributeType:
      type: string
      enum:
        - STRING
        - INTEGER
        - FLOAT
        - BOOLEAN
        - DATE
      description: Types of credential attributes
      example: STRING

    CredentialDefinition:
      type: object
      required:
        - id
        - name
        - version
        - type
        - credentialSchema
        # TODO enable back in SHOWCASE-81
        # - representations
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the credential definition
          example: 123e4567-e89b-12d3-a456-426614174123
        name:
          type: string
          description: Name of the credential definition
          example: Credential Definition Name
        credentialSchema:
          $ref: '#/components/schemas/CredentialSchema'
        identifierType:
          $ref: '#/components/schemas/IdentifierType'
        identifier:
          type: string
          description: External identifier of this issuer
          example: did:sov:XUeUZauFLeBNofY3NhaZCB
        version:
          type: string
          description: Version of the credential definition
          example: '1.0'
        type:
          $ref: '#/components/schemas/CredentialType'
        representations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/CredentialRepresentation'
              - $ref: '#/components/schemas/OCARepresentation'
        revocation:
          oneOf:
            - $ref: '#/components/schemas/RevocationInfo'
            - $ref: '#/components/schemas/AnonCredRevocation'
        icon:
          $ref: '#/components/schemas/Asset'
        createdAt:
          type: string
          description: Date and time the credential definition was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the credential definition was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        approvedBy:
          $ref: '#/components/schemas/User'
        approvedAt:
          type: string
          description: Date and time the credential definition was last approved
          format: date-time
          example: 2025-03-06T11:30:16.573Z

    CredentialDefinitionRequest:
      type: object
      required:
        - name
        - version
        - type
        - credentialSchema
        # TODO enable back in SHOWCASE-81
        # - representations
      properties:
        name:
          type: string
          description: Name of the credential definition
          example: Credential Definition Name
        identifierType:
          $ref: '#/components/schemas/IdentifierType'
        identifier:
          type: string
          description: External identifier of this schema
          example: did:sov:XUeUZauFLeBNofY3NhaZCB
        version:
          type: string
          description: Version of the credential definition
          example: '1.0'
        type:
          $ref: '#/components/schemas/CredentialType'
        credentialSchema:
          type: string
          description: Reference to the associated credential schema
          example: 456e4567-e89b-12d3-a456-426614174789
        representations:
          type: array
          description: List of representations for this credential definition
          example:
            - type: CREDENTIAL_DEFINITION
          items:
            oneOf:
              - $ref: '#/components/schemas/CredentialRepresentation'
              - $ref: '#/components/schemas/OCARepresentation'
        revocation:
          oneOf:
            - $ref: '#/components/schemas/RevocationInfo'
            - $ref: '#/components/schemas/AnonCredRevocation'
          description: Revocation information for the credential
          example:
            title: Revocation Information
            description: This credential is revocable
        icon:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174469
        approvedBy:
          type: string
          description: Reference to the associated user who approved this definition
          example: 456e4567-e89b-12d3-a456-426614174789
        approvedAt:
          type: string
          description: Date and time the credential definition was last approved
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    CredentialDefinitionsResponse:
      type: object
      properties:
        credentialDefinitions:
          type: array
          description: "List of credential definitions"
          items:
            $ref: '#/components/schemas/CredentialDefinition'
    CredentialDefinitionResponse:
      type: object
      properties:
        credentialDefinition:
          $ref: '#/components/schemas/CredentialDefinition'

    CredentialAttribute:
      type: object
      required:
        - id
        - name
        - type
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the attribute
          example: 890e4567-e89b-12d3-a456-426614174123
        name:
          type: string
          description: Name of the attribute
          example: name
        value:
          type: string
          description: Default or example value of the attribute
          example: John Doe
        type:
          $ref: '#/components/schemas/CredentialAttributeType'
        createdAt:
          type: string
          description: Date and time the credential attribute was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the credential attribute was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    CredentialAttributeRequest:
      type: object
      required:
        - name
        - type
        - value
      properties:
        name:
          type: string
          description: Name of the attribute
          example: name
        value:
          type: string
          description: Default or example value of the attribute
          example: John Doe
        type:
          $ref: '#/components/schemas/CredentialAttributeType'

    CredentialRepresentation:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the credential representation
          example: 123e4567-e89b-12d3-abcd-426614174456
        createdAt:
          type: string
          description: Date and time the credential representation was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the credential representation was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    OCARepresentation:
      allOf:
        - $ref: '#/components/schemas/CredentialRepresentation'
        - type: object
          required:
            - credDefId
            - schemaId
          properties:
            credDefId:
              type: string
              description: Credential definition identifier in the OCA format
              example: 123e4567-e89b-12d3-a456-426614174123
            schemaId:
              type: string
              description: Schema identifier in the OCA format
              example: 123e4567-e89b-12d3-a456-426614174123
            ocaBundleUrl:
              type: string
              description: URL to the OCA bundle for this representation
              example: https://example.com/ocaBundle.json
      description: Overlay Capture Architecture representation of a credential

    RevocationInfo:
      type: object
      required:
        - id
        - title
        - description
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Id of the revocation information
          example: abcd4567-e89b-12d3-a456-426614174123
        title:
          type: string
          description: Title of the revocation information
          example: Revocation Information
        description:
          type: string
          description: Detailed description of the revocation process or requirements
          example: This credential is revocable
        createdAt:
          type: string
          description: Date and time the Revocation info was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the Revocation info was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    AnonCredRevocation:
      allOf:
        - $ref: '#/components/schemas/RevocationInfo'
        - type: object
          required:
            - registryId
          properties:
            registryId:
              type: string
              description: Identifier of the revocation registry for AnonCreds
              example: 123e4567-e89b-12d3-a456-426614174123
      description: Anonymous Credentials specific revocation information

    CredentialSchema:
      type: object
      required:
        - id
        - name
        - version
        - attrNames
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the credential schema
          example: 123e4567-e89b-12d3-a456-426614174123
        name:
          type: string
          description: Name of the credential schema
          example: Diploma Schema
        version:
          type: string
          description: Version of the credential schema
          example: '1.0'
        identifierType:
          $ref: '#/components/schemas/IdentifierType'
        identifier:
          type: string
          description: External identifier of this schema
          example: did:sov:XUeUZauFLeBNofY3NhaZCB
        source:
          $ref: '#/components/schemas/Source'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/CredentialAttribute'
        createdAt:
          type: string
          description: Date and time the credential attribute was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the credential attribute was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    CredentialSchemaRequest:
      type: object
      required:
        - name
        - version
        - attrNames
      properties:
        name:
          type: string
          description: Name of the credential schema
          example: Diploma Schema
        version:
          type: string
          description: Version of the credential schema
          example: '1.0'
        identifierType:
          $ref: '#/components/schemas/IdentifierType'
        source:
          $ref: '#/components/schemas/Source'
        identifier:
          type: string
          description: External identifier of this schema
          example: did:sov:XUeUZauFLeBNofY3NhaZCB
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/CredentialAttributeRequest'
    CredentialSchemasResponse:
      type: object
      properties:
        credentialSchemas:
          type: array
          description: "List of credential schemas"
          items:
            $ref: '#/components/schemas/CredentialSchema'
    CredentialSchemaResponse:
      type: object
      properties:
        credentialSchema:
          $ref: '#/components/schemas/CredentialSchema'

    Showcase:
      type: object
      required:
        - id
        - tenantId
        - name
        - slug
        - description
        - status
        - scenarios
        - personas
        - credentialDefinitions
        - hidden
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the showcase
          example: 123e4567-e89b-12d3-a456-426614174456
        tenantId:
          type: string
          description: ID of the tenant that created this showcase
          example: 8832be1c-5dc3-46bb-9e21-fbca4f7bcffc
        name:
          type: string
          description: Name of the showcase
          example: Credential Showcase BCGov
        slug:
          type: string
          description: URL-friendly identifier for the showcase
          example: bc-wallet-bcgov
        description:
          type: string
          description: Description of the showcase
          example: Collection of credential usage scenarios
        status:
          $ref: '#/components/schemas/ShowcaseStatus'
        hidden:
          type: boolean
          description: Whether the showcase is hidden from public view
          default: false
        scenarios:
          type: array
          description: List of scenarios in this showcase
          items:
            oneOf:
              - $ref: '#/components/schemas/IssuanceScenario'
              - $ref: '#/components/schemas/PresentationScenario'
            discriminator:
              propertyName: type
              mapping:
                ISSUANCE: '#/components/schemas/IssuanceScenario'
                PRESENTATION: '#/components/schemas/PresentationScenario'
        personas:
          type: object
          description: List of personas involved in this showcase
          items:
            $ref: '#/components/schemas/Persona'
        bannerImage:
          $ref: '#/components/schemas/Asset'
        completionMessage:
          type: string
          description: Message to display when the showcase is completed
          example: "You have successfully completed the showcase"
        createdBy:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          description: Date and time the showcase was created
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        updatedAt:
          type: string
          description: Date and time the showcase was last updated
          format: date-time
          example: 2025-03-06T11:30:16.573Z
        approvedBy:
          $ref: '#/components/schemas/User'
        approvedAt:
          type: string
          description: Date and time this showcase was last approved
          format: date-time
          example: 2025-03-06T11:30:16.573Z
    ShowcasesResponse:
      type: object
      properties:
        showcases:
          type: array
          description: "List of showcases"
          items:
            $ref: '#/components/schemas/Showcase'
    ShowcaseResponse:
      type: object
      properties:
        showcase:
          $ref: '#/components/schemas/Showcase'
    ShowcaseRequest:
      required:
        - name
        - tenantId
        - description
        - status
        - hidden
      properties:
        name:
          type: string
          description: Name of the showcase
          example: Credential Showcase BCGov
        tenantId:
          type: string
          description: ID of the tenant that created this showcase
          example: 8832be1c-5dc3-46bb-9e21-fbca4f7bcffc
        description:
          type: string
          description: Description of the showcase
          example: Collection of credential usage scenarios
        status:
          $ref: '#/components/schemas/ShowcaseStatus'
        hidden:
          type: boolean
          description: Whether the showcase is hidden from public view
          default: false
        scenarios:
          type: array
          description: List of scenarios in this showcase
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174469
        personas:
          type: array
          description: List of personas involved in this showcase
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174469
        bannerImage:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174469
        completionMessage:
          type: string
          example: "You have successfully completed the showcase"

    ShowcaseStatus:
      type: string
      enum:
        - PENDING
        - ACTIVE
        - ARCHIVED
      description: Types of supported credentials
      example: PENDING

    ScenarioType:
      type: string
      enum:
        - ISSUANCE
        - PRESENTATION
      description: Types of supported scenarios
      example: ISSUANCE

  responses:
    'BadRequest':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Invalid request data'
    'Unauthorized':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Invalid authentication credentials'
    'Forbidden':
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Insufficient permissions to access resource'
    'NotFound':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Resource not found'
    'InternalServerError':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'An unexpected error occurred'
