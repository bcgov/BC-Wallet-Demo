services:
  bc-wallet-api-server:
    image: ${DOCKER_REGISTRY:-sphereonregistry.azurecr.io}/bc-wallet-api-server:latest
    restart: unless-stopped
    networks:
      - frontend
      - messagebroker_net
      - db_net
    environment:
      # Only include variables this service needs
      - PORT=5005
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      # - DATABASE_URL=${DATABASE_URL} uncomment when using URL instead of vars above
      - APP_NAME=${APP_NAME}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - postgres  # Ensure Postgres starts first
    ports:
      - "${API_PORT}:3000" # remove when enabling proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=frontend"
      - "traefik.http.routers.bc-wallet-api-server.entrypoints=websecure"
      - "traefik.http.routers.bc-wallet-api-server.rule=${API_PUBLIC_HOSTS}"
      - "traefik.http.routers.bc-wallet-api-server.tls.certresolver=acmeresolver"
      - "traefik.http.services.bc-wallet-api-server.loadbalancer.server.port=3000"
      - "traefik.http.services.bc-wallet-api-server.loadbalancer.server.scheme=http"

  bc-wallet-traction-adapter:
    image: ${DOCKER_REGISTRY:-sphereonregistry.azurecr.io}/bc-wallet-traction-adapter:latest
    restart: unless-stopped
    networks:
      - messagebroker_net
    environment:
      - PORT=3000
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - APP_NAME=${APP_NAME}
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - rabbitmq  # Ensure RabbitMQ starts first

  postgres:
    image: postgres:16
    restart: unless-stopped
    networks:
      - db_net
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4-management  # Using RabbitMQ 4.x with management plugin
    restart: unless-stopped
    networks:
      - messagebroker_net
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_EXPOSED_PORT:-5672}:5672"
      - "${RABBITMQ_MGMT_EXPOSED_PORT:-15672}:15672"

  traefik:
    image: traefik:latest
    profiles:
      - traefik  # CONDITIONAL - set COMPOSE_PROFILES=traefik to enable
    command: >
      --providers.docker
      --providers.docker.exposedbydefault=false
      --entrypoints.web.address=:80
      --entrypoints.web.http.redirections.entryPoint.to=websecure
      --entrypoints.web.http.redirections.entryPoint.scheme=https
      --entrypoints.web.http.redirections.entrypoint.permanent=true
      --entrypoints.websecure.address=:443
      --certificatesresolvers.acmeresolver.acme.httpchallenge=true
      --certificatesresolvers.acmeresolver.acme.httpchallenge.entrypoint=web
      --certificatesresolvers.acmeresolver.acme.email=dev@sphereon.com
      --certificatesresolvers.acmeresolver.acme.storage=/cert/acme.json
      --api.dashboard=false
      --log.level=INFO
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./cert/:/cert/
    restart: unless-stopped
    networks:
      - frontend
    labels:
      - "traefik.enable=true"

volumes:
  postgres_data:  # Named volume for Postgres data persistence

networks:
  messagebroker_net:
    driver: bridge
    name: messagebroker_net
    internal: true          # not exposed when set to true
  db_net:
    driver: bridge
    name: db_net
    internal: true          # not exposed when set to true
  frontend:
    driver: bridge
    name: frontend_net
    internal: false
