'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Credential Showcase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfIssuer = instanceOfIssuer;
exports.IssuerFromJSON = IssuerFromJSON;
exports.IssuerFromJSONTyped = IssuerFromJSONTyped;
exports.IssuerToJSON = IssuerToJSON;
exports.IssuerToJSONTyped = IssuerToJSONTyped;
const CredentialDefinition_1 = require("./CredentialDefinition");
const IssuerType_1 = require("./IssuerType");
const CredentialSchema_1 = require("./CredentialSchema");
const Asset_1 = require("./Asset");
/**
 * Check if a given object implements the Issuer interface.
 */
function instanceOfIssuer(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('description' in value) || value['description'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    if (!('credentialDefinitions' in value) || value['credentialDefinitions'] === undefined)
        return false;
    if (!('credentialSchemas' in value) || value['credentialSchemas'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined)
        return false;
    return true;
}
function IssuerFromJSON(json) {
    return IssuerFromJSONTyped(json, false);
}
function IssuerFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'type': (0, IssuerType_1.IssuerTypeFromJSON)(json['type']),
        'organization': json['organization'] == null ? undefined : json['organization'],
        'logoId': json['logoId'] == null ? undefined : json['logoId'],
        'logo': json['logo'] == null ? undefined : (0, Asset_1.AssetFromJSON)(json['logo']),
        'credentialDefinitions': (json['credentialDefinitions'].map(CredentialDefinition_1.CredentialDefinitionFromJSON)),
        'credentialSchemas': (json['credentialSchemas'].map(CredentialSchema_1.CredentialSchemaFromJSON)),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}
function IssuerToJSON(json) {
    return IssuerToJSONTyped(json, false);
}
function IssuerToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'type': (0, IssuerType_1.IssuerTypeToJSON)(value['type']),
        'organization': value['organization'],
        'logoId': value['logoId'],
        'logo': (0, Asset_1.AssetToJSON)(value['logo']),
        'credentialDefinitions': (value['credentialDefinitions'].map(CredentialDefinition_1.CredentialDefinitionToJSON)),
        'credentialSchemas': (value['credentialSchemas'].map(CredentialSchema_1.CredentialSchemaToJSON)),
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}
//# sourceMappingURL=Issuer.js.map