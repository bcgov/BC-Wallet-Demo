name: PR Build and Deploy UI

on:
  pull_request:
    branches:
      - main
    paths:
      - "**"  # You may want to restrict this to frontend code paths
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

jobs:
  ready:
    name: "Check if PR is ready for review"
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.ready_for_review.outputs.true_false }}
      build: ${{ steps.ready_for_review.outputs.owner_true_false }}
    steps:
      - id: ready_for_review
        run: |
          echo "true_false=${{ toJSON(github.event.pull_request.draft != true && github.repository_owner == 'Sphereon-Opensource') }}" >> $GITHUB_OUTPUT #should change to bcgov
          echo "owner_true_false=${{ toJSON(github.repository_owner == 'Sphereon-Opensource') }}" >> $GITHUB_OUTPUT
          
  build_showcase_ui:
    name: "Build Showcase UI"
    runs-on: ubuntu-latest
    needs:
      - ready
    if: ${{ always() && fromJSON(needs.ready.outputs.build) == true }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build and Push Docker Image
        id: builder
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:pr-${{ github.event.number }}
            public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Add build args to disable type checking
          build-args: |
            NEXT_TYPESCRIPT_CHECK=0
    outputs:
      image_tag: ${{ github.sha }}

  image-scan:
    name: "Image Scan - Showcase UI"
    needs: [build_showcase_ui, ready]
    runs-on: ubuntu-latest
    if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true && !(contains(needs.*.result, 'failure')) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Scan UI Docker Image
        uses: ./.github/actions/trivy-scan
        with:
          scan-type: 'image'
          scan-ref: 'public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:${{ needs.build_showcase_ui.outputs.image_tag }}'
          scan-title: 'Docker Image Scan Results for ditp-showcase-creator-ui'
  
  deploy:
    name: "Deploy PR Environment - UI"
    environment: development
    runs-on: ubuntu-latest
    needs:
      - ready
      - build_showcase_ui
    if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true && !(contains(needs.*.result, 'failure')) }}
    steps:
      - uses: actions/checkout@v4
      
      # Copy charts to EC2 server first
      - name: Copy charts to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "charts/"
          target: "/home/ubuntu/pipeline"
          overwrite: true
          strip_components: 0

      # Deploy using SSH to EC2 instance
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/ubuntu/pipeline/charts/showcase-ui

            cat > pr-values.yaml <<EOF
            # UI configuration
            ui:
              ingress:
                enabled: true
                annotations:
                  kubernetes.io/ingress.class: "traefik"
                  traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
                  traefik.ingress.kubernetes.io/router.tls: "true"
                host: "pr-${{ github.event.number }}-bcshowcase-ui.dev.nborbit.ca"
            
            # Global ingress settings
            ingress:
              enabled: true
              className: "traefik"
              annotations:
                kubernetes.io/ingress.class: "traefik"
                traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
                cert-manager.io/cluster-issuer: "letsencrypt-prod"
              hosts:
                - host: pr-${{ github.event.number }}-bcshowcase-ui.dev.nborbit.ca
                  paths:
                    - path: /
                      pathType: Prefix
                      service: showcase-ui
              tls:
                - secretName: pr-${{ github.event.number }}-showcase-ui-tls
                  hosts:
                    - pr-${{ github.event.number }}-bcshowcase-ui.dev.nborbit.ca
            EOF

            # Create PR-specific Certificate
            cat > cert.yaml << 'CERTEOF'
            apiVersion: cert-manager.io/v1
            kind: Certificate
            metadata:
              name: pr-${{ github.event.number }}-showcase-ui-tls
            spec:
              secretName: pr-${{ github.event.number }}-showcase-ui-tls
              issuerRef:
                name: letsencrypt-prod
                kind: ClusterIssuer
              dnsNames:
                - pr-${{ github.event.number }}-bcshowcase-ui.dev.nborbit.ca
            CERTEOF
            sudo kubectl apply -f cert.yaml

            # Create PR-specific UI IngressRoute
            cat > ingress.yaml << 'INGRESSEOF'
            apiVersion: traefik.containo.us/v1alpha1
            kind: IngressRoute
            metadata:
              name: pr-${{ github.event.number }}-showcase-ui-route
              namespace: default
            spec:
              entryPoints:
                - websecure
              routes:
                - match: Host(`pr-${{ github.event.number }}-bcshowcase-ui.dev.nborbit.ca`)
                  kind: Rule
                  services:
                    - name: pr-${{ github.event.number }}-showcase-ui-showcase-ui
                      port: 3050
              tls:
                secretName: pr-${{ github.event.number }}-showcase-ui-tls
            INGRESSEOF
            sudo kubectl apply -f ingress.yaml

            helm upgrade --install pr-${{ github.event.number }}-showcase-ui -f ./pr-values.yaml --set ui.image.tag=${{ needs.build_showcase_ui.outputs.image_tag }} . --wait
            rm -rf /home/ubuntu/pipeline/charts
      
      - name: Restart PR Deployments
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            sudo kubectl rollout restart deployment pr-${{ github.event.number }}-showcase-ui-showcase-ui

  deploymenturls:
    name: PR Deployment URLs comment
    runs-on: ubuntu-latest
    needs:
      - deploy
    if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true && !(contains(needs.*.result, 'failure')) }}
    steps:
      - uses: actions/checkout@v4

      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          comment-author: "github-actions[bot]"
          body-includes: PR Deployment URLs ready for review.

      - name: Create comment
        if: steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.number }}
          body: |
            | Deployment | Resource | Location |
            | --- | --- | --- |
            | Showcase UI | | https://pr-${{ github.event.number }}-bcshowcase-ui.dev.nborbit.ca/ |

            PR Deployment URLs ready for review.