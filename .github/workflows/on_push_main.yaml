name: Build, Push and Deploy 
on:
  workflow_dispatch:
  push:
    branches:
      - k3s-depolyment
      - main
      # - develop-4sure
    paths:
        - "apps/bc-wallet-api-server/**"
        - "packages/bc-wallet-traction-adapter/**"
        - "apps/bc-wallet-showcase-creator/**"
        - "apps/bc-wallet-demo-server/**"
        - "apps/bc-wallet-demo-web/**"
        - "charts/**"
        - "*"

jobs:
  ready:
    name: "Check if PR is ready for review"
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.ready_for_review.outputs.true_false }}
      build: ${{ steps.ready_for_review.outputs.owner_true_false }}
    steps:
      - id: ready_for_review
        run: |
          echo "true_false=${{ toJSON(github.event.pull_request.draft != true && github.repository_owner == 'getmoin') }}" >> $GITHUB_OUTPUT #should change to bcgov
          echo "owner_true_false=${{ toJSON(github.repository_owner == 'getmoin') }}" >> $GITHUB_OUTPUT #bcgov

  build_api_server:
    name: "Build API Server"
    runs-on: ubuntu-latest
    needs:
      - ready
    if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true }}
    steps:
      - uses: actions/checkout@v4
      - name: Build API Server Image
        uses: ./.github/actions/build_docker
        id: builder
        with:
          context: "."
          dockerfile: "./apps/bc-wallet-api-server/Dockerfile"
          image_name: ${{ github.repository_owner}}/bc-wallet-api-server
          registry: ghcr.io
          registry_username: ${{ github.repository_owner}}
          registry_password: ${{ secrets.CR_PAT }}
          visibility: "public"
    outputs:
      image_tag: ${{ steps.builder.outputs.image_tag }}

  build_traction_adapter:
    name: "Build Traction Adapter"
    runs-on: ubuntu-latest
    needs:
      - ready
    if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Traction Adapter Image
        uses: ./.github/actions/build_docker
        id: builder
        with:
          context: "."
          dockerfile: "./packages/bc-wallet-traction-adapter/Dockerfile"
          image_name: ${{ github.repository_owner}}/bc-wallet-traction-adapter
          registry: ghcr.io
          registry_username: ${{ github.repository_owner}}
          registry_password: ${{ secrets.CR_PAT }}
          visibility: "public"
    outputs:
      image_tag: ${{ steps.builder.outputs.image_tag }}

  build_showcase_creator:
    name: "Build Showcase Creator"
    runs-on: ubuntu-latest
    needs:
      - ready
    if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Showcase Creator Image
        uses: ./.github/actions/build_docker
        id: builder
        with:
          context: "./apps/bc-wallet-showcase-creator"
          dockerfile: "./apps/bc-wallet-showcase-creator/Dockerfile"
          image_name: ${{ github.repository_owner}}/bc-wallet-showcase-creator
          registry: ghcr.io
          registry_username: ${{ github.repository_owner}}
          registry_password: ${{ secrets.CR_PAT }}
          visibility: "public"
    outputs:
      image_tag: ${{ steps.builder.outputs.image_tag }}

  build_demo_server:
    name: "Build Demo Server"
    runs-on: ubuntu-latest
    needs:
      - ready
    if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Demo Server Image
        uses: ./.github/actions/build_docker
        id: builder
        with:
          context: "./apps/bc-wallet-demo-server"
          dockerfile: "./apps/bc-wallet-demo-server/Dockerfile"
          image_name: ${{ github.repository_owner}}/bc-wallet-demo-server
          registry: ghcr.io
          registry_username: ${{ github.repository_owner}}
          registry_password: ${{ secrets.CR_PAT }}
          visibility: "public"
    outputs:
      image_tag: ${{ steps.builder.outputs.image_tag }}

  build_demo_web:
    name: "Build Demo Web"
    runs-on: ubuntu-latest
    needs:
      - ready
    if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true }}
    steps:
      - uses: actions/checkout@v4
      - name: Build Demo Web Image
        uses: ./.github/actions/build_docker
        id: builder
        with:
          context: "."
          dockerfile: "./apps/bc-wallet-demo-web/Dockerfile"
          image_name: ${{ github.repository_owner}}/bc-wallet-demo-web
          registry: ghcr.io
          registry_username: ${{ github.repository_owner}}
          registry_password: ${{ secrets.CR_PAT }}
          visibility: "public"
    outputs:
      image_tag: ${{ steps.builder.outputs.image_tag }}

  deploy:
    name: "Deploy to K3s"
    environment: development
    runs-on: ubuntu-latest
    needs:
      - build_api_server
      - build_traction_adapter
      - build_showcase_creator
      - build_demo_web
      - build_demo_server
    if: ${{ always() && !(contains(needs.*.result, 'failure')) }}
    steps:
      - uses: actions/checkout@v4
      
      # Copy charts to K3s server
      - name: Copy charts to K3s server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.K3S_HOST }}
          username: ${{ secrets.K3S_USERNAME }}
          key: ${{ secrets.K3S_SSH_KEY }}
          source: "charts/"
          target: "/home/ubuntu/pipeline"
          overwrite: true
          strip_components: 0

      # Deploy using SSH to K3s instance
      - name: Deploy to K3s via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.K3S_HOST }}
          username: ${{ secrets.K3S_USERNAME }}
          key: ${{ secrets.K3S_SSH_KEY }}
          script: |
            cd /home/ubuntu/pipeline/charts/bc-wallet
            
            # Update dependencies and deploy with Helm
            helm dependency update
            
            helm upgrade --install bc-wallet -f ./values.yaml \
              --set api_server.image.tag=${{ needs.build_api_server.outputs.image_tag }} \
              --set traction_adapter.image.tag=${{ needs.build_traction_adapter.outputs.image_tag }} \
              --set showcase_creator.image.tag=${{ needs.build_showcase_creator.outputs.image_tag }} \
              --set demo_web.image.tag=${{ needs.build_demo_web.outputs.image_tag }} \
              --set demo_server.image.tag=${{ needs.build_demo_server.outputs.image_tag }} \
              . --wait
            
            # Create Certificate for TLS
            cat <<EOF | kubectl apply -f -
            apiVersion: cert-manager.io/v1
            kind: Certificate
            metadata:
              name: bc-wallet-tls
            spec:
              secretName: bc-wallet-tls
              issuerRef:
                name: letsencrypt-prod
                kind: ClusterIssuer
              dnsNames:
                - bcshowcase-api.dev.nborbit.ca
                - bcshowcase-traction.dev.nborbit.ca
                - bcshowcase-ui.dev.nborbit.ca
                - bcshowcase-demo-web.dev.nborbit.ca
                - bcshowcase-demo-server.dev.nborbit.ca
            EOF
            
            # Clean up
            rm -rf /home/ubuntu/bc-wallet/charts
      
      # Restart deployments to ensure they pick up any changes
      - name: Restart Deployments
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.K3S_HOST }}
          username: ${{ secrets.K3S_USERNAME }}
          key: ${{ secrets.K3S_SSH_KEY }}
          script: |
            kubectl rollout restart deployment bc-wallet-bc-wallet-api-server
            kubectl rollout restart deployment bc-wallet-bc-wallet-traction-adapter
            kubectl rollout restart deployment bc-wallet-bc-wallet-showcase-creator
            kubectl rollout restart deployment bc-wallet-bc-wallet-demo-web
            kubectl rollout restart deployment bc-wallet-bc-wallet-demo-server

  # deploy_uat:
  #   name: Deploy to UAT
  #   environment: uat  
  #   runs-on: ubuntu-latest
  #   needs: deploy_dev
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install OpenShift CLI tools
  #       uses: redhat-actions/openshift-tools-installer@v1
  #       with:
  #         oc: "4.14"

  #     - name: Authenticate and set context
  #       uses: redhat-actions/oc-login@v1
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         certificate_authority_data: ${{ secrets.OPENSHIFT_CA_CRT }}
  #         namespace: ${{ secrets.OPENSHIFT_UAT_NAMESPACE }}
     
  #     - name: Deploy to OpenShift with Helm
  #       run: |
  #         cd charts/bc-wallet
  #         #helm dependency update
  #         helm upgrade --install bc-wallet \
  #           --namespace ${{ secrets.OPENSHIFT_UAT_NAMESPACE }} -f ./values.yaml -f ./values-uat.yaml --set api_server.image.tag=${{ needs.build_api_server.outputs.image_tag }} --set traction_adapter.image.tag=${{ needs.build_traction_adapter.outputs.image_tag }} --set showcase_creator.image.tag=${{ needs.build_showcase_creator.outputs.image_tag }} --set demo_web.image.tag=${{ needs.build_demo_web.outputs.image_tag }} --set demo_server.image.tag=${{ needs.build_demo_server.outputs.image_tag }} . --wait
      
  #     - name: Restart Deployments
  #       run: |
  #         oc rollout restart deployment/bc-wallet-bc-wallet-api-server
  #         oc rollout restart deployment/bc-wallet-bc-wallet-traction-adapter

  # deploy_prod:
  #   name: Deploy to Production
  #   environment: production 
  #   runs-on: ubuntu-latest
  #   needs: deploy_uat
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install OpenShift CLI tools
  #       uses: redhat-actions/openshift-tools-installer@v1
  #       with:
  #         oc: "4.14"

  #     - name: Authenticate and set context
  #       uses: redhat-actions/oc-login@v1
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
  #         openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
  #         certificate_authority_data: ${{ secrets.OPENSHIFT_CA_CRT }}
  #         namespace: ${{ secrets.OPENSHIFT_PROD_NAMESPACE }}
     
  #     - name: Deploy to OpenShift with Helm
  #       run: |
  #         cd charts/bc-wallet
          
  #         helm dependency update
  #         helm upgrade --install bc-wallet \
  #           --namespace ${{ secrets.OPENSHIFT_PROD_NAMESPACE }} -f ./values.yaml -f ./values-prod.yaml --set api_server.image.tag=${{ needs.build_api_server.outputs.image_tag }} --set traction_adapter.image.tag=${{ needs.build_traction_adapter.outputs.image_tag }} --set showcase_creator.image.tag=${{ needs.build_showcase_creator.outputs.image_tag }} --set demo_web.image.tag=${{ needs.build_demo_web.outputs.image_tag }} --set demo_server.image.tag=${{ needs.build_demo_server.outputs.image_tag }} . --wait
      
  #     - name: Restart Deployments
  #       run: |
  #         oc rollout restart deployment/bc-wallet-bc-wallet-api-server
  #         oc rollout restart deployment/bc-wallet-bc-wallet-traction-adapter

  # image-scan:
  #   name: "Image Scan"
  #   needs: [build_api_server, build_traction_adapter, build_showcase_creator, build_demo_server, build_demo_web, ready]
  #   runs-on: ubuntu-latest
  #   if: ${{ always() && fromJSON(needs.ready.outputs.deploy) == true && !(contains(needs.*.result, 'failure')) }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #     - name: Scan API Server Docker Image
  #       uses: ./.github/actions/trivy-scan
  #       with:
  #         scan-type: 'image'
  #         scan-ref: 'ghcr.io/${{ github.repository_owner }}/bc-wallet-api-server:${{ needs.build_api_server.outputs.image_tag }}'
  #         scan-title: 'Docker Image Scan Results for bc-wallet-api-server'
  #     - name: Scan Traction Adapter Docker Image
  #       uses: ./.github/actions/trivy-scan
  #       with:
  #         scan-type: 'image'
  #         scan-ref: 'ghcr.io/${{ github.repository_owner }}/bc-wallet-traction-adapter:${{ needs.build_traction_adapter.outputs.image_tag }}'
  #         scan-title: 'Docker Image Scan Results for bc-wallet-traction-adapter'
  #     - name: Scan API Server Docker Image
  #       uses: ./.github/actions/trivy-scan
  #       with:
  #         scan-type: 'image'
  #         scan-ref: 'ghcr.io/${{ github.repository_owner }}/bc-wallet-demo-web:${{ needs.build_demo_web.outputs.image_tag }}'
  #         scan-title: 'Docker Image Scan Results for bc-wallet-demo-web'
  #     - name: Scan Traction Adapter Docker Image
  #       uses: ./.github/actions/trivy-scan
  #       with:
  #         scan-type: 'image'
  #         scan-ref: 'ghcr.io/${{ github.repository_owner }}/bc-wallet-showcase-creator:${{ needs.build_showcase_creator.outputs.image_tag }}'
  #         scan-title: 'Docker Image Scan Results for bc-wallet-showcase-creator'
  #     - name: Scan Demo Server Docker Image
  #       uses: ./.github/actions/trivy-scan
  #       with:
  #         scan-type: 'image'
  #         scan-ref: 'ghcr.io/${{ github.repository_owner }}/bc-wallet-demo-server:${{ needs.build_demo_server.outputs.image_tag }}'
  #         scan-title: 'Docker Image Scan Results for bc-wallet-demo-server'