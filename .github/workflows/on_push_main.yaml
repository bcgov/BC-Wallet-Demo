name: Build and Deploy UI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    # paths:
    #   - "**"

jobs:
  
  build_showcase_ui:
    name: "Build Showcase UI"
    runs-on: ubuntu-latest
    # if: ${{ always() && fromJSON(needs.ready.outputs.build) == true }}
    #needs:
    #  - test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build and Push Docker Image
        id: builder
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:latest
            public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
    outputs:
      image_tag: ${{ github.sha }}


  image-scan:
    name: "Image Scan - Showcase UI"
    needs: build_showcase_ui
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Scan UI Docker Image
        uses: ./.github/actions/trivy-scan
        with:
          scan-type: 'image'
          scan-ref: 'public.ecr.aws/k8o4d9r5/bcshowcase/ditp-showcase-creator-ui:${{ github.sha }}'
          scan-title: 'Docker Image Scan Results for Showcase UI'

  deploy:
    name: Deploy
    environment: development
    runs-on: ubuntu-latest
    needs:
      - build_showcase_ui
    steps:
      - uses: actions/checkout@v4
      
      # Copy charts to EC2 server first
      - name: Copy charts to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "charts/"
          target: "/home/ubuntu/pipeline"
          overwrite: true
          strip_components: 0

      # Deploy using SSH to EC2 instance
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "Deploying Showcase UI"

            # Create Certificate
            cat > cert.yaml << 'CERTEOF'
            apiVersion: cert-manager.io/v1
            kind: Certificate
            metadata:
              name: showcase-ui-tls
            spec:
              secretName: showcase-ui-tls
              issuerRef:
                name: letsencrypt-prod
                kind: ClusterIssuer
              dnsNames:
                - bcshowcase-ui.dev.nborbit.ca
            CERTEOF
            sudo kubectl apply -f cert.yaml
            
            # Create Traefik IngressRoute
            cat > ingress.yaml << 'INGRESSEOF'
            apiVersion: traefik.containo.us/v1alpha1
            kind: IngressRoute
            metadata:
              name: showcase-ui-route
              namespace: kube-system
            spec:
              entryPoints:
                - websecure
              routes:
                - match: Host(`bcshowcase-ui.dev.nborbit.ca`)
                  kind: Rule
                  services:
                    - name: showcase-ui-showcase-ui
                      port: 3050
              tls:
                secretName: showcase-ui-tls
            INGRESSEOF
            sudo kubectl apply -f ingress.yaml
            
            cd /home/ubuntu/pipeline/charts/showcase-ui
            helm dependency update && helm upgrade --install showcase-ui -f ./values.yaml --set ui.image.tag=${{ github.sha }} . --wait
            
            rm -rf /home/ubuntu/pipeline/charts
      
      - name: Restart Deployments
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            sudo kubectl rollout restart deployment showcase-ui-showcase-ui


  deploymenturls:
    name: Deployment URLs comment
    runs-on: ubuntu-latest
    needs:
      - deploy
    # if: ${{ (fromJSON(needs.ready.outputs.deploy) == true) && !(contains(needs.*.result, 'failure')) }}
    steps:
      - uses: actions/checkout@v4

      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          comment-author: "github-actions[bot]"
          body-includes: Deployment URLs ready for review.

      - name: Create comment
        if: steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.number }}
          body: |
            | Deployment | Resource | Location |
            | --- | --- | --- |
            | Showcase UI | | bcshowcase-ui.dev.nborbit.ca/ |

            Deployment URLs ready for review.
