name: 'Build Docker Image'
description: 'Builds and pushes a Docker image to a registry'
inputs:
  context:
    description: 'Docker build context'
    required: true
  dockerfile:
    description: 'Path to Dockerfile'
    required: true
  image_name:
    description: 'Name of the image'
    required: true
  registry:
    description: 'Container registry'
    required: true
  registry_username:
    description: 'Registry username'
    required: true
  registry_password:
    description: 'Registry password'
    required: true
  visibility:
    description: 'Package visibility (public or private)'
    required: false
    default: 'private'
outputs:
  image_tag:
    description: 'The tag of the built image'
    value: ${{ steps.docker_build.outputs.image_tag }}
runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - name: Generate image tag
      id: docker_build
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TAG="pr-${{ github.event.number }}"
        else
          TAG="${{ github.sha }}"
        fi
        echo "image_tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: true
        tags: ${{ inputs.registry }}/${{ inputs.image_name }}:${{ steps.docker_build.outputs.image_tag }}

    - name: Set package visibility
      if: inputs.registry == 'ghcr.io' && inputs.visibility == 'public'
      shell: bash
      run: |
        # Debug information
        echo "Setting visibility for package: ${{ inputs.image_name }}"
        
        # Extract the repository name from the image name (for unscoped packages)
        REPO_NAME=$(echo "${{ inputs.image_name }}" | cut -d'/' -f2)
        
        # For GitHub Container Registry, the format is different
        # Try the organization-level API endpoint first
        echo "Attempting to set visibility at organization level..."
        ORG_RESPONSE=$(curl -s -X PUT \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.registry_password }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/orgs/${{ inputs.registry_username }}/packages/container/$REPO_NAME/visibility" \
          -d '{"visibility":"public"}')
        
        echo "Organization API Response: $ORG_RESPONSE"
        
        # If that fails, try the user-level API endpoint
        if [[ "$ORG_RESPONSE" == *"Not Found"* ]]; then
          echo "Organization-level API failed, trying user-level API..."
          USER_RESPONSE=$(curl -s -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.registry_password }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/user/packages/container/$REPO_NAME/visibility" \
            -d '{"visibility":"public"}')
          
          echo "User API Response: $USER_RESPONSE"
        fi
        
        # If both fail, try with the full package name
        if [[ "$ORG_RESPONSE" == *"Not Found"* && "$USER_RESPONSE" == *"Not Found"* ]]; then
          echo "Both API calls failed, trying with full package name..."
          FULL_RESPONSE=$(curl -s -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ inputs.registry_password }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/user/packages/container/${{ inputs.registry_username }}%2F$REPO_NAME/visibility" \
            -d '{"visibility":"public"}')
          
          echo "Full package name API Response: $FULL_RESPONSE"
        fi