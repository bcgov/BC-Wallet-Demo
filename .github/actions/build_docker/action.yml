name: 'Build Docker Image'
description: 'Builds and pushes a Docker image to a registry'
inputs:
  context:
    description: 'Docker build context'
    required: true
  dockerfile:
    description: 'Path to Dockerfile'
    required: true
  image_name:
    description: 'Name of the image'
    required: true
  registry:
    description: 'Container registry'
    required: true
  registry_username:
    description: 'Registry username'
    required: true
  registry_password:
    description: 'Registry password'
    required: true
  visibility:
    description: 'Package visibility (public or private)'
    required: false
    default: 'private'
outputs:
  image_tag:
    description: 'The tag of the built image'
    value: ${{ steps.docker_build.outputs.image_tag }}
runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - name: Generate image tag
      id: docker_build
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          TAG="pr-${{ github.event.number }}"
        else
          TAG="${{ github.sha }}"
        fi
        echo "image_tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: true
        tags: ${{ inputs.registry }}/${{ inputs.image_name }}:${{ steps.docker_build.outputs.image_tag }}

    - name: Set package visibility
      if: inputs.registry == 'ghcr.io' && inputs.visibility == 'public'
      shell: bash
      run: |
        # Debug information
        echo "Setting visibility for package: ${{ inputs.image_name }}"
        
        # Extract the repository name from the image name
        REPO_NAME=$(echo "${{ inputs.image_name }}" | cut -d'/' -f2)
        
        # Install GitHub CLI
        echo "Installing GitHub CLI..."
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install -y gh
        
        # Authenticate with GitHub CLI
        echo "Authenticating with GitHub CLI..."
        echo "${{ inputs.registry_password }}" | gh auth login --with-token
        
        # Try to set package visibility using GitHub CLI
        echo "Setting package visibility with GitHub CLI..."
        
        # Try organization-level package
        echo "Trying organization-level package..."
        ORG_RESULT=$(gh api --method PUT -H "Accept: application/vnd.github+json" "/orgs/${{ inputs.registry_username }}/packages/container/$REPO_NAME/visibility" -f visibility=public 2>&1 || echo "Failed")
        
        if [[ "$ORG_RESULT" == *"Failed"* ]]; then
          echo "Organization-level package not found, trying user-level package..."
          # Try user-level package
          USER_RESULT=$(gh api --method PUT -H "Accept: application/vnd.github+json" "/user/packages/container/$REPO_NAME/visibility" -f visibility=public 2>&1 || echo "Failed")
          
          if [[ "$USER_RESULT" == *"Failed"* ]]; then
            echo "User-level package not found, trying with full package name..."
            # Try with full package name
            FULL_RESULT=$(gh api --method PUT -H "Accept: application/vnd.github+json" "/user/packages/container/${{ inputs.registry_username }}/$REPO_NAME/visibility" -f visibility=public 2>&1 || echo "Failed")
            
            if [[ "$FULL_RESULT" == *"Failed"* ]]; then
              echo "All attempts to set package visibility failed."
              echo "Please check your token permissions and try setting visibility manually:"
              echo "1. Go to https://github.com/${{ inputs.registry_username }}?tab=packages"
              echo "2. Find the package $REPO_NAME"
              echo "3. Click on Package settings"
              echo "4. Change visibility to Public"
            else
              echo "Successfully set package visibility to public using full package name."
            fi
          else
            echo "Successfully set package visibility to public using user-level package."
          fi
        else
          echo "Successfully set package visibility to public using organization-level package."
        fi