import {
  ariesProofRequests,
  assets,
  credentialAttributes,
  credentialDefinitions,
  credentialRepresentations,
  credentialSchemas,
  issuers,
  personas,
  relyingParties,
  revocationInfo,
  scenarios,
  showcases,
  stepActions,
  steps,
} from '../../database/schema'

// $inferSelect does not respect nullability of fields and the type has every field as required
// $inferInsert only provides fields that are notNull() or generated by default. This seems to be a bug in DrizzleORM or very not pleasant choice

export type Asset = typeof assets.$inferSelect
export type NewAsset = typeof assets.$inferInsert & { fileName?: string | null; description?: string | null }

export type Persona = Omit<typeof personas.$inferSelect, 'headshotImage' | 'bodyImage'> & {
  headshotImage: Asset | null
  bodyImage: Asset | null
}
export type NewPersona = Omit<typeof personas.$inferInsert, 'slug'> & {
  headshotImage?: string | null
  bodyImage?: string | null
  hidden: boolean
}

export type CredentialDefinition = Omit<typeof credentialDefinitions.$inferSelect, 'icon' | 'type' | 'credentialSchema'> & {
  type: CredentialType
  icon: Asset
  credentialSchema: CredentialSchema
  representations: CredentialRepresentation[]
  revocation?: RevocationInfo | null
}

export type NewCredentialDefinition = Omit<typeof credentialDefinitions.$inferInsert, 'type'> & {
  type: CredentialType
  representations?: NewCredentialRepresentation[] // TODO SHOWCASE-81 make required
  revocation?: NewRevocationInfo | null
  identifierType?: IdentifierType | null
  identifier?: string | null
}

export type CredentialAttribute = Omit<typeof credentialAttributes.$inferSelect, 'credentialSchema'> & {
  type: CredentialAttributeType
}
export type NewCredentialAttribute = Omit<typeof credentialAttributes.$inferInsert, 'credentialSchema'> & {
  type: CredentialAttributeType
}

export type CredentialSchema = typeof credentialSchemas.$inferSelect & {
  attributes: CredentialAttribute[]
}

export type NewCredentialSchema = typeof credentialSchemas.$inferInsert & {
  attributes: NewCredentialAttribute[]
  identifierType?: IdentifierType | null
  identifier?: string | null
}

export type CredentialRepresentation = Omit<typeof credentialRepresentations.$inferSelect, 'credentialDefinition'>
export type NewCredentialRepresentation = Omit<typeof credentialRepresentations.$inferInsert, 'credentialDefinition'>

export type RevocationInfo = Omit<typeof revocationInfo.$inferSelect, 'credentialDefinition'>
export type NewRevocationInfo = Omit<typeof revocationInfo.$inferInsert, 'credentialDefinition'>

export type RelyingParty = Omit<typeof relyingParties.$inferSelect, 'logo'> & {
  credentialDefinitions: CredentialDefinition[]
  logo: Asset | null
}
export type NewRelyingParty = Omit<typeof relyingParties.$inferInsert, 'logo'> & {
  credentialDefinitions: string[]
  organization?: string | null
  logo?: string | null
}

export type Issuer = Omit<typeof issuers.$inferSelect, 'logo'> & {
  credentialDefinitions: CredentialDefinition[]
  credentialSchemas: CredentialSchema[]
  logo: Asset | null
}
export type NewIssuer = Omit<typeof issuers.$inferInsert, 'logo'> & {
  credentialDefinitions: string[]
  credentialSchemas: string[]
  organization?: string | null
  logo?: string | null
}

export enum CredentialType {
  ANONCRED = 'ANONCRED',
}

export enum CredentialAttributeType {
  STRING = 'STRING',
  INTEGER = 'INTEGER',
  FLOAT = 'FLOAT',
  BOOLEAN = 'BOOLEAN',
  DATE = 'DATE',
}

export enum RelyingPartyType {
  ARIES = 'ARIES',
}

export enum IdentifierType {
  DID = 'DID',
}

export enum Source {
  IMPORTED = 'IMPORTED',
  CREATED = 'CREATED',
}

export enum IssuerType {
  ARIES = 'ARIES',
}

export enum StepType {
  HUMAN_TASK = 'HUMAN_TASK',
  SERVICE = 'SERVICE',
  SCENARIO = 'SCENARIO',
}

export enum StepActionType {
  ARIES_OOB = 'ARIES_OOB',
}

export enum ScenarioType {
  ISSUANCE = 'ISSUANCE',
  PRESENTATION = 'PRESENTATION',
}

export type IssuanceScenario = Omit<typeof scenarios.$inferSelect, 'relyingParty' | 'issuer' | 'bannerImage'> & {
  personas: Persona[]
  steps: Step[]
  issuer?: Issuer | null
  bannerImage?: Asset | null
}
export type NewIssuanceScenario = Omit<typeof scenarios.$inferInsert, 'relyingParty' | 'scenarioType' | 'slug'> & {
  personas: string[]
  issuer: string
  steps: NewStep[]
  bannerImage?: string | null
  hidden: boolean
}

export type PresentationScenario = Omit<typeof scenarios.$inferSelect, 'relyingParty' | 'issuer' | 'bannerImage'> & {
  personas: Persona[]
  steps: Step[]
  relyingParty?: RelyingParty | null
  bannerImage?: Asset | null
}
export type NewPresentationScenario = Omit<typeof scenarios.$inferInsert, 'issuer' | 'scenarioType' | 'slug'> & {
  personas: string[]
  relyingParty: string
  steps: NewStep[]
  bannerImage?: string | null
  hidden: boolean
}

export type Step = Omit<typeof steps.$inferSelect, 'asset'> & {
  actions: AriesOOBAction[]
  asset?: Asset | null
}
export type NewStep = Omit<typeof steps.$inferInsert, 'scenario'> & {
  asset?: string | null
  actions: NewAriesOOBAction[]
  subScenario?: string | null
}

export type AriesOOBAction = Omit<typeof stepActions.$inferSelect, 'proofRequest'> & {
  proofRequest?: AriesProofRequest | null
}
export type NewAriesOOBAction = Omit<typeof stepActions.$inferInsert, 'step' | 'proofRequest'> & {
  proofRequest: NewAriesProofRequest
}

export type AriesRequestCredentialAttribute = {
  attributes?: string[]
  restrictions?: string[]
}

export type AriesRequestCredentialPredicate = {
  name?: string
  type?: string
  value?: string
  restrictions?: string[]
}

export type AriesProofRequest = typeof ariesProofRequests.$inferSelect
export type NewAriesProofRequest = Omit<typeof ariesProofRequests.$inferInsert, 'stepAction'>

export type Showcase = Omit<typeof showcases.$inferSelect, 'bannerImage'> & {
  scenarios: Scenario[]
  credentialDefinitions: CredentialDefinition[]
  personas: Persona[]
  bannerImage?: Asset | null
}
export type NewShowcase = Omit<typeof showcases.$inferInsert, 'slug'> & {
  scenarios: string[]
  credentialDefinitions: string[]
  personas: string[]
  bannerImage?: string | null
  hidden: boolean
  completionMessage?: string | null
}

export type Scenario = IssuanceScenario | PresentationScenario
export type NewScenario = NewIssuanceScenario | NewPresentationScenario

export enum ShowcaseStatus {
  PENDING = 'PENDING',
  ACTIVE = 'ACTIVE',
  ARCHIVED = 'ARCHIVED',
}
