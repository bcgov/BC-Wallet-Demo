:3000 {
    # Most common security headers
    header {
        # enable CSP
        Content-Security-Policy "default-src * data: blob: filesystem: 'unsafe-inline' 'unsafe-eval'"
        # enable HSTS
        Strict-Transport-Security "max-age=86400; includeSubDomains"
        # disable clients from sniffing the media type
        X-Content-Type-Options "nosniff"
        # XSS protection
        X-XSS-Protection 1
        # clickjacking protection
        X-Frame-Options DENY
    }

    # Log everything to stdout
    log {
        output stdout
        level INFO
    }
    # Set server root to parent directory
    root * /srv

    # Enable static file serving with proper MIME types
    file_server

    # Enable gzip, zstd compression
    encode zstd gzip

    # Enable templates module
    templates

    vars basePath ${REACT_APP_BASE_ROUTE}

    # Health check for openshift
    handle /health {
        respond 200
    }

    handle ${REACT_APP_BASE_ROUTE}/demo {
        redir {vars.basePath}
    }

    handle ${REACT_APP_BASE_ROUTE}/dashboard {
        redir {vars.basePath}
    }

    handle ${REACT_APP_BASE_ROUTE}* {
        @websockets {
            header Connection *Upgrade*
            header Upgrade websocket
        }

        reverse_proxy @websockets ${REACT_APP_HOST_BACKEND}

        # Required for SPA router to work
        @spa_router {
            not path ${REACT_APP_BASE_ROUTE}/demo/* ${REACT_APP_BASE_ROUTE}/server/* ${REACT_APP_BASE_ROUTE}/agent/ready ${REACT_APP_BASE_ROUTE}/public/* ${REACT_APP_BASE_ROUTE}/qr
            not path ${REACT_APP_BASE_ROUTE}/static/*
            file {
                try_files {path} ${REACT_APP_BASE_ROUTE}/index.html
            }
        }
        rewrite @spa_router {http.matchers.file.relative}

        # pass API requests to backend
        @pass {
            path ${REACT_APP_BASE_ROUTE}/demo/* ${REACT_APP_BASE_ROUTE}/server/* ${REACT_APP_BASE_ROUTE}/agent/ready ${REACT_APP_BASE_ROUTE}/public/* ${REACT_APP_BASE_ROUTE}/qr
        }

        # Proxy requests to API service
        reverse_proxy @pass ${REACT_APP_HOST_BACKEND} {
            trusted_proxies 0.0.0.0/0
            header_up Host {upstream_hostport}
            header_up X-Forwarded-Host {host}
        }
    }

    handle {
        redir {vars.basePath}
    }
} 